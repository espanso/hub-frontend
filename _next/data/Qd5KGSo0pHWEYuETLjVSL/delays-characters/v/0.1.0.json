{"pageProps":{"packageRepo":{"package":{"id":"delays-characters-0.1.0","name":"delays-characters","author":"Stephen Meech","description":"A package to allow delays, and characters not supported by Espanso, to be injected using the Python pynput library.","title":"Delays and characters","version":"0.1.0","tags":["delays","characters","keyboard","control","python"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/delays-characters-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/delays-characters-0.1.0-sha256.txt"},"manifest":{"name":"delays-characters","title":"Delays and characters","description":"A package to allow delays, and characters not supported by Espanso, to be injected using the Python pynput library.","homepage":{"_tag":"Some","value":"https://github.com/smeech"},"version":"0.1.0","author":"Stephen Meech","tags":["delays","characters","keyboard","control","python"]},"readme":"# Delays-characters\n\nAn Espanso trigger that uses the Python `pynput` library to inject text, *instead* of Espanso. This enables the addition of pauses (sleep), \\<Tab> etc, and other key combinations not supported by Espanso. It can include use of Espanso {{variables}}. \n\nSee https://pynput.readthedocs.io/en/latest/keyboard.html#controlling-the-keyboard for details of the keywords, and https://pynput.readthedocs.io/en/latest/keyboard.html#pynput.keyboard.Key for the key names.\n\nIf necessary, use `python -m pip install pynput` to add pynput to your Python installation. Tested here with Python 3.10 but may work from Python 2.7 or earlier.\n\nSupports keywords \"type\", \"tap\", \"press\", \"release\", and \"sleep\".\n\nThe package includes a sample script which demonstrates a delay and the effect of simulating pressing the \\<Shift> key. For different scripts, copy, and rename, the `package.yml` file into the `espanso/match/` directory. Edit the trigger value and Input list to suit your purpose.\n\nNB. *The variable {{Trig}} **must** match the trigger in length at least, so that `parse_pynput.py` removes the trigger text cleanly.*\n\nA possible future enhancement could be the addition of mouse control.\n","packageYml":[{"name":"package.yml","content":"# yaml-language-server: $schema=https://raw.githubusercontent.com/espanso/espanso/dev/schemas/match.schema.json\n\n# Supports type, tap, press, release, and sleep.\n\n# For new scripts this file may be copied to the espanso/match directory and edited.\n\nmatches:\n  - trigger: :delay    # Remember to include this value in Trig, below.\n    replace: \"{{Output}}\"\n    vars:\n      - name: Trig\n        type: echo\n        params:\n          echo: :delay # This MUST match the trigger text.\n      - name: Input\n        type: echo\n        params:\n          echo: |      # Amend the contents below to suit, adding variables etc.\n            type Hello, World!\n            tap enter\n            type Pausing for one second\n            tap enter\n            sleep 1 \n            type How are you?\n            tap space\n            press shift\n            type I am a bot\n            release shift\n            tap enter\n            type The trigger was \"{{Trig}}\"\n            tap enter\n            tap tab\n            type The End.\n      - name: Output\n        type: script\n        params:\n          args:\n            - python\n            - '%CONFIG%/match/packages/delays-characters/parse_pynput.py' \n            - '{{Trig}}'\n            - '{{Input}}'"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Delays-characters\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An Espanso trigger that uses the Python \", _jsx(_components.code, {\n        children: \"pynput\"\n      }), \" library to inject text, \", _jsx(_components.em, {\n        children: \"instead\"\n      }), \" of Espanso. This enables the addition of pauses (sleep), <Tab> etc, and other key combinations not supported by Espanso. It can include use of Espanso {{variables}}.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"https://pynput.readthedocs.io/en/latest/keyboard.html#controlling-the-keyboard\",\n        children: \"https://pynput.readthedocs.io/en/latest/keyboard.html#controlling-the-keyboard\"\n      }), \" for details of the keywords, and \", _jsx(_components.a, {\n        href: \"https://pynput.readthedocs.io/en/latest/keyboard.html#pynput.keyboard.Key\",\n        children: \"https://pynput.readthedocs.io/en/latest/keyboard.html#pynput.keyboard.Key\"\n      }), \" for the key names.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If necessary, use \", _jsx(_components.code, {\n        children: \"python -m pip install pynput\"\n      }), \" to add pynput to your Python installation. Tested here with Python 3.10 but may work from Python 2.7 or earlier.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Supports keywords \\\"type\\\", \\\"tap\\\", \\\"press\\\", \\\"release\\\", and \\\"sleep\\\".\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The package includes a sample script which demonstrates a delay and the effect of simulating pressing the <Shift> key. For different scripts, copy, and rename, the \", _jsx(_components.code, {\n        children: \"package.yml\"\n      }), \" file into the \", _jsx(_components.code, {\n        children: \"espanso/match/\"\n      }), \" directory. Edit the trigger value and Input list to suit your purpose.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"NB. \", _jsxs(_components.em, {\n        children: [\"The variable {{Trig}} \", _jsx(_components.strong, {\n          children: \"must\"\n        }), \" match the trigger in length at least, so that \", _jsx(_components.code, {\n          children: \"parse_pynput.py\"\n        }), \" removes the trigger text cleanly.\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A possible future enhancement could be the addition of mouse control.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}