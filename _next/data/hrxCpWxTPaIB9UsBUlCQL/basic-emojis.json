{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"basic-emojis-0.1.0","name":"basic-emojis","author":"Federico Terzi","description":"A package to include some basic emojis in espanso.","title":"Basic Emojis","version":"0.1.0","tags":["emoji","chat"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/basic-emojis-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/basic-emojis-0.1.0-sha256.txt"},"manifest":{"author":"Federico Terzi","description":"A package to include some basic emojis in espanso.","name":"basic-emojis","title":"Basic Emojis","version":"0.1.0","tags":["emoji","chat"],"homepage":{"_tag":"None"}},"readme":"A simple package to bring basic emojis to espanso.\nIt works by replacing keywords like `:lol` with `😂`. More details below.\n\n### Installation\n\nInstall the package with:\n\n```\nespanso install basic-emojis\n```\n\n### Usage\n\nThis package replaces the following keywords with the associated emoji while you're\ntyping:\n\nKeyword | Emoji\n--- | ---\n`:lol` | 😂\n`:llol` | 😂😂😂😂\n`:sad` | ☹\n`:ssad` | ☹☹☹☹\n`:sml` | 😊\n`:strong` | 💪\n`:stlol` | 💪😂\n`:ba` | 😎\n`:ok` | 👍\n`:ook` | 👍👍👍👍\n`:happy` | 😄\n`:cry` | 😭\n`:wow` | 😮","packageYml":[{"name":"package.yml","content":"matches:\n  - trigger: \":lol\"\n    replace: \"😂\"\n  - trigger: \":llol\"\n    replace: \"😂😂😂😂\"\n  - trigger: \":sad\"\n    replace: \"☹\"\n  - trigger: \":ssad\"\n    replace: \"☹☹☹☹\"\n  - trigger: \":sml\"\n    replace: \"😊\"\n  - trigger: \":strong\"\n    replace: \"💪\"\n  - trigger: \":stlol\"\n    replace: \"💪😂\"\n  - trigger: \":ba\"\n    replace: \"😎\"\n  - trigger: \":ok\"\n    replace: \"👍\"\n  - trigger: \":ook\"\n    replace: \"👍👍👍👍\"\n  - trigger: \":happy\"\n    replace: \"😄\"\n  - trigger: \":cry\"\n    replace: \"😭\"\n  - trigger: \":wow\"\n    replace: \"😮\""}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"A simple package to bring basic emojis to espanso.\\nIt works by replacing keywords like \", _jsx(_components.code, {\n        children: \":lol\"\n      }), \" with \", _jsx(_components.code, {\n        children: \"😂\"\n      }), \". More details below.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Install the package with:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"espanso install basic-emojis\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This package replaces the following keywords with the associated emoji while you're\\ntyping:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Keyword\"\n          }), _jsx(_components.th, {\n            children: \"Emoji\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":lol\"\n            })\n          }), _jsx(_components.td, {\n            children: \"😂\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":llol\"\n            })\n          }), _jsx(_components.td, {\n            children: \"😂😂😂😂\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":sad\"\n            })\n          }), _jsx(_components.td, {\n            children: \"☹\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":ssad\"\n            })\n          }), _jsx(_components.td, {\n            children: \"☹☹☹☹\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":sml\"\n            })\n          }), _jsx(_components.td, {\n            children: \"😊\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":strong\"\n            })\n          }), _jsx(_components.td, {\n            children: \"💪\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":stlol\"\n            })\n          }), _jsx(_components.td, {\n            children: \"💪😂\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":ba\"\n            })\n          }), _jsx(_components.td, {\n            children: \"😎\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":ok\"\n            })\n          }), _jsx(_components.td, {\n            children: \"👍\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":ook\"\n            })\n          }), _jsx(_components.td, {\n            children: \"👍👍👍👍\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":happy\"\n            })\n          }), _jsx(_components.td, {\n            children: \"😄\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":cry\"\n            })\n          }), _jsx(_components.td, {\n            children: \"😭\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":wow\"\n            })\n          }), _jsx(_components.td, {\n            children: \"😮\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"versions":["0.1.0"]},"__N_SSG":true}