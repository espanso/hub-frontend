{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"turkish-1.0.0","name":"turkish","author":"Alp Kaan Aksu","description":"A package for typing Turkish characters with any keybord layout.","title":"Turkish characters","version":"1.0.0","tags":["turkish"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/turkish-1.0.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/turkish-1.0.0-sha256.txt"},"manifest":{"name":"turkish","title":"Turkish characters","description":"A package for typing Turkish characters with any keybord layout.","version":"1.0.0","author":"Alp Kaan Aksu","tags":["turkish"],"homepage":{"_tag":"None"}},"readme":"# Turkish Characters ðŸ‡¹ðŸ‡·\n\nA simple package to convert English characters to Turkish.\n\n## Vowels\n| Trigger | Replacement |\n|:-------------:|:-------------:|\n| U-            | Ãœ     |\n| O-            | Ã–     |\n| I-            | Ä°     |\n| u-            | Ã¼     |\n| o-            | Ã¶     |\n| i-            | Ä±    |\n\n\n## Consonants\n| Trigger | Replacement |\n|:-------------:|:-------------:|\n| C-            | Ã‡     |\n| S-            | Åž     |\n| G-            | Äž     |\n| c-            | Ã§     |\n| s-            | ÅŸ     |\n| g-            | ÄŸ     |\n\n## Criteria for the 'trigger character'\n- Should be accessible with one key stroke.\n    - This is why `:` is not good enough.\n- Should be *caps lock agnostic*\n    - This is why repetions are not good enough.\n    - E.g. `Ii` and `II` should both be replaced with `Ä°`. What about `iI`? Is it `Ä°` or `Ä±`?\n- It should come **after** the base character. It just feels more natural.\n    - `:` won't work, e.g. \"numbers: 1, 2, 3\" would get replaced with \"numberÅŸ 1, 2, 3\"\n- [base] + [trigger] is not a valid combination otherwise.\n    - `e` after vowels: Goethe\n    - `x` after consonants: Matrix\n    - `'`: Marc's\n    - `-`: `i--` (programming)\n\n### Decision\n`-` satisfies almost all of the criteria, except for one: it can have a special meaning in some programming languages. But I prefer `i -= 1` over `i--`, you don't need it that often in most of the modern programming languages anyway (because we have for-in loops). And most people don't write code, so it should be okay. This why I decided to go with `-`.","packageYml":[{"name":"package.yml","content":"matches:\n  # Turkish Characters   \n  - trigger: \"C-\"\n    replace: \"Ã‡\"\n        \n  - trigger: \"c-\"\n    replace: \"Ã§\"\n\n  - trigger: \"S-\"\n    replace: \"Åž\"\n    \n  - trigger: \"s-\"\n    replace: \"ÅŸ\"\n        \n  - trigger: \"G-\"\n    replace: \"Äž\"\n\n  - trigger: \"g-\"\n    replace: \"ÄŸ\"\n  \n  - trigger: \"U-\"\n    replace: \"Ãœ\"\n        \n  - trigger: \"u-\"\n    replace: \"Ã¼\"\n\n  - trigger: \"O-\"\n    replace: \"Ã–\"\n    \n  - trigger: \"o-\"\n    replace: \"Ã¶\"\n        \n  - trigger: \"I-\"\n    replace: \"Ä°\"\n\n  - trigger: \"i-\"\n    replace: \"Ä±\""}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"var N=Object.defineProperty,c=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var d=(t,a,n)=>a in t?N(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n,e=(t,a)=>{for(var n in a||(a={}))l.call(a,n)&&d(t,n,a[n]);if(i)for(var n of i(a))o.call(a,n)&&d(t,n,a[n]);return t},p=(t,a)=>c(t,g(a));var m=(t,a)=>{var n={};for(var r in t)l.call(t,r)&&a.indexOf(r)<0&&(n[r]=t[r]);if(t!=null&&i)for(var r of i(t))a.indexOf(r)<0&&o.call(t,r)&&(n[r]=t[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:t}=r,a=m(r,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Turkish Characters \\u{1F1F9}\\u{1F1F7}\"),mdx(\"p\",null,\"A simple package to convert English characters to Turkish.\"),mdx(\"h2\",null,\"Vowels\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Trigger\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Replacement\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"U-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\xDC\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"O-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\xD6\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"I-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\u0130\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"u-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\xFC\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"o-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\xF6\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"i-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\u0131\")))),mdx(\"h2\",null,\"Consonants\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Trigger\"),mdx(\"th\",e({parentName:\"tr\"},{align:\"center\"}),\"Replacement\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"C-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\xC7\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"S-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\u015E\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"G-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\u011E\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"c-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\xE7\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"s-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\u015F\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"g-\"),mdx(\"td\",e({parentName:\"tr\"},{align:\"center\"}),\"\\u011F\")))),mdx(\"h2\",null,\"Criteria for the 'trigger character'\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Should be accessible with one key stroke.\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"This is why \",mdx(\"inlineCode\",{parentName:\"li\"},\":\"),\" is not good enough.\"))),mdx(\"li\",{parentName:\"ul\"},\"Should be \",mdx(\"em\",{parentName:\"li\"},\"caps lock agnostic\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"This is why repetions are not good enough.\"),mdx(\"li\",{parentName:\"ul\"},\"E.g. \",mdx(\"inlineCode\",{parentName:\"li\"},\"Ii\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"II\"),\" should both be replaced with \",mdx(\"inlineCode\",{parentName:\"li\"},\"\\u0130\"),\". What about \",mdx(\"inlineCode\",{parentName:\"li\"},\"iI\"),\"? Is it \",mdx(\"inlineCode\",{parentName:\"li\"},\"\\u0130\"),\" or \",mdx(\"inlineCode\",{parentName:\"li\"},\"\\u0131\"),\"?\"))),mdx(\"li\",{parentName:\"ul\"},\"It should come \",mdx(\"strong\",{parentName:\"li\"},\"after\"),\" the base character. It just feels more natural.\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\":\"),` won't work, e.g. \"numbers: 1, 2, 3\" would get replaced with \"number\\u015F 1, 2, 3\"`))),mdx(\"li\",{parentName:\"ul\"},\"[base]\",\" + \",\"[trigger]\",\" is not a valid combination otherwise.\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"e\"),\" after vowels: Goethe\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"x\"),\" after consonants: Matrix\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"'\"),\": Marc's\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"-\"),\": \",mdx(\"inlineCode\",{parentName:\"li\"},\"i--\"),\" (programming)\")))),mdx(\"h3\",null,\"Decision\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"-\"),\" satisfies almost all of the criteria, except for one: it can have a special meaning in some programming languages. But I prefer \",mdx(\"inlineCode\",{parentName:\"p\"},\"i -= 1\"),\" over \",mdx(\"inlineCode\",{parentName:\"p\"},\"i--\"),\", you don't need it that often in most of the modern programming languages anyway (because we have for-in loops). And most people don't write code, so it should be okay. This why I decided to go with \",mdx(\"inlineCode\",{parentName:\"p\"},\"-\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"versions":["1.0.0"]},"__N_SSG":true}