{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"turkish-1.0.0","name":"turkish","author":"Alp Kaan Aksu","description":"A package for typing Turkish characters with any keybord layout.","title":"Turkish characters","version":"1.0.0","tags":["turkish"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/turkish-1.0.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/turkish-1.0.0-sha256.txt"},"manifest":{"name":"turkish","title":"Turkish characters","description":"A package for typing Turkish characters with any keybord layout.","version":"1.0.0","author":"Alp Kaan Aksu","tags":["turkish"],"homepage":{"_tag":"None"}},"readme":"# Turkish Characters ðŸ‡¹ðŸ‡·\n\nA simple package to convert English characters to Turkish.\n\n## Vowels\n| Trigger | Replacement |\n|:-------------:|:-------------:|\n| U-            | Ãœ     |\n| O-            | Ã–     |\n| I-            | Ä°     |\n| u-            | Ã¼     |\n| o-            | Ã¶     |\n| i-            | Ä±    |\n\n\n## Consonants\n| Trigger | Replacement |\n|:-------------:|:-------------:|\n| C-            | Ã‡     |\n| S-            | Åž     |\n| G-            | Äž     |\n| c-            | Ã§     |\n| s-            | ÅŸ     |\n| g-            | ÄŸ     |\n\n## Criteria for the 'trigger character'\n- Should be accessible with one key stroke.\n    - This is why `:` is not good enough.\n- Should be *caps lock agnostic*\n    - This is why repetions are not good enough.\n    - E.g. `Ii` and `II` should both be replaced with `Ä°`. What about `iI`? Is it `Ä°` or `Ä±`?\n- It should come **after** the base character. It just feels more natural.\n    - `:` won't work, e.g. \"numbers: 1, 2, 3\" would get replaced with \"numberÅŸ 1, 2, 3\"\n- [base] + [trigger] is not a valid combination otherwise.\n    - `e` after vowels: Goethe\n    - `x` after consonants: Matrix\n    - `'`: Marc's\n    - `-`: `i--` (programming)\n\n### Decision\n`-` satisfies almost all of the criteria, except for one: it can have a special meaning in some programming languages. But I prefer `i -= 1` over `i--`, you don't need it that often in most of the modern programming languages anyway (because we have for-in loops). And most people don't write code, so it should be okay. This why I decided to go with `-`.","packageYml":[{"name":"package.yml","content":"matches:\n  # Turkish Characters   \n  - trigger: \"C-\"\n    replace: \"Ã‡\"\n        \n  - trigger: \"c-\"\n    replace: \"Ã§\"\n\n  - trigger: \"S-\"\n    replace: \"Åž\"\n    \n  - trigger: \"s-\"\n    replace: \"ÅŸ\"\n        \n  - trigger: \"G-\"\n    replace: \"Äž\"\n\n  - trigger: \"g-\"\n    replace: \"ÄŸ\"\n  \n  - trigger: \"U-\"\n    replace: \"Ãœ\"\n        \n  - trigger: \"u-\"\n    replace: \"Ã¼\"\n\n  - trigger: \"O-\"\n    replace: \"Ã–\"\n    \n  - trigger: \"o-\"\n    replace: \"Ã¶\"\n        \n  - trigger: \"I-\"\n    replace: \"Ä°\"\n\n  - trigger: \"i-\"\n    replace: \"Ä±\""}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    em: \"em\",\n    strong: \"strong\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Turkish Characters ðŸ‡¹ðŸ‡·\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A simple package to convert English characters to Turkish.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Vowels\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            align: \"center\",\n            children: \"Trigger\"\n          }), _jsx(_components.th, {\n            align: \"center\",\n            children: \"Replacement\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"U-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Ãœ\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"O-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Ã–\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"I-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Ä°\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"u-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Ã¼\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"o-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Ã¶\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"i-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Ä±\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Consonants\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            align: \"center\",\n            children: \"Trigger\"\n          }), _jsx(_components.th, {\n            align: \"center\",\n            children: \"Replacement\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"C-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Ã‡\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"S-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Åž\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"G-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Äž\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"c-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"Ã§\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"s-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"ÅŸ\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"center\",\n            children: \"g-\"\n          }), _jsx(_components.td, {\n            align: \"center\",\n            children: \"ÄŸ\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Criteria for the 'trigger character'\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Should be accessible with one key stroke.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"This is why \", _jsx(_components.code, {\n              children: \":\"\n            }), \" is not good enough.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Should be \", _jsx(_components.em, {\n          children: \"caps lock agnostic\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"This is why repetions are not good enough.\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"E.g. \", _jsx(_components.code, {\n              children: \"Ii\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"II\"\n            }), \" should both be replaced with \", _jsx(_components.code, {\n              children: \"Ä°\"\n            }), \". What about \", _jsx(_components.code, {\n              children: \"iI\"\n            }), \"? Is it \", _jsx(_components.code, {\n              children: \"Ä°\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"Ä±\"\n            }), \"?\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It should come \", _jsx(_components.strong, {\n          children: \"after\"\n        }), \" the base character. It just feels more natural.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \":\"\n            }), \" won't work, e.g. \\\"numbers: 1, 2, 3\\\" would get replaced with \\\"numberÅŸ 1, 2, 3\\\"\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"[base] + [trigger] is not a valid combination otherwise.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"e\"\n            }), \" after vowels: Goethe\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"x\"\n            }), \" after consonants: Matrix\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"'\"\n            }), \": Marc's\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"-\"\n            }), \": \", _jsx(_components.code, {\n              children: \"i--\"\n            }), \" (programming)\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Decision\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"-\"\n      }), \" satisfies almost all of the criteria, except for one: it can have a special meaning in some programming languages. But I prefer \", _jsx(_components.code, {\n        children: \"i -= 1\"\n      }), \" over \", _jsx(_components.code, {\n        children: \"i--\"\n      }), \", you don't need it that often in most of the modern programming languages anyway (because we have for-in loops). And most people don't write code, so it should be okay. This why I decided to go with \", _jsx(_components.code, {\n        children: \"-\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"versions":["1.0.0"]},"__N_SSG":true}