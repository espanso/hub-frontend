{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"bib-generator-1.0.0","name":"bib-generator","author":"Xeophon","description":"Generate a BibTex entry by searching through DBLP","title":"Bib Generator","version":"1.0.0","tags":["bib","academia","research"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/bib-generator-1.0.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/bib-generator-1.0.0-sha256.txt"},"manifest":{"name":"bib-generator","title":"Bib Generator","homepage":{"_tag":"Some","value":"https://github.com/Xeophon/hub/tree/main/packages/bib-generator"},"description":"Generate a BibTex entry by searching through DBLP","version":"1.0.0","author":"Xeophon","tags":["bib","academia","research"]},"readme":"# bib-generator\r\nGenerates a bib entry from a matching regex using espanso.\r\n\r\nRequires Python 3 installed on your system.\r\n\r\n## Usage\r\nJust write `:cite:<your search>:` anywhere, it will show 5 results in a form and then replace your text with the .bib entry you selected in the form. It uses the [DBLP](https://dblp.org/) API under the hood, which is restricted to computer science papers only. I highly recommend searching with `<Author> <Some parts of the title>` to improve the search results, as `<Some parts of the title>` often results in irrelevant results.\r\n\r\nNote: Espanso limits the regex matches to 30 characters ([Source](https://github.com/espanso/espanso/security)), so you must limit your query.","packageYml":[{"name":"package.yml","content":"matches:\r\n  - regex: \":cite:(?P<citation>.*?):\"\r\n    replace: \"{{final}}\"\r\n    vars:\r\n      - name: dblp_search_results\r\n        type: script\r\n        params:\r\n          args:\r\n            - python\r\n            - \"%CONFIG%/match/packages/bib-generator/dblp_multi_search.py\"\r\n            - \"{{citation}}\"\r\n      - name: form1\r\n        type: form\r\n        params:\r\n          layout: |\r\n            Select bib entry:\r\n            [[entries]]\r\n          fields:\r\n            entries:\r\n              type: list\r\n              values: \"{{dblp_search_results}}\"\r\n      - name: final\r\n        type: script\r\n        params:\r\n          args:\r\n            - python\r\n            - \"%CONFIG%/match/packages/bib-generator/bib_generator.py\"\r\n            - \"{{form1.entries}}\""}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"bib-generator\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Generates a bib entry from a matching regex using espanso.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Requires Python 3 installed on your system.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Just write \", _jsx(_components.code, {\n        children: \":cite:<your search>:\"\n      }), \" anywhere, it will show 5 results in a form and then replace your text with the .bib entry you selected in the form. It uses the \", _jsx(_components.a, {\n        href: \"https://dblp.org/\",\n        children: \"DBLP\"\n      }), \" API under the hood, which is restricted to computer science papers only. I highly recommend searching with \", _jsx(_components.code, {\n        children: \"<Author> <Some parts of the title>\"\n      }), \" to improve the search results, as \", _jsx(_components.code, {\n        children: \"<Some parts of the title>\"\n      }), \" often results in irrelevant results.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note: Espanso limits the regex matches to 30 characters (\", _jsx(_components.a, {\n        href: \"https://github.com/espanso/espanso/security\",\n        children: \"Source\"\n      }), \"), so you must limit your query.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"versions":["1.0.0"]},"__N_SSG":true}