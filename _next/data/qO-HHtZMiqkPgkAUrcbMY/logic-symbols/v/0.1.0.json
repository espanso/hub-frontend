{"pageProps":{"packageRepo":{"package":{"id":"logic-symbols-0.1.0","name":"logic-symbols","author":"Max Gallup","description":"Commonly used symbols in predicate logic and boolean algebra.","title":"Logic Symbols","version":"0.1.0","tags":["logic","symbols"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/logic-symbols-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/logic-symbols-0.1.0-sha256.txt"},"manifest":{"author":"Max Gallup","description":"Commonly used symbols in predicate logic and boolean algebra.","name":"logic-symbols","title":"Logic Symbols","version":"0.1.0","tags":["logic","symbols"],"homepage":{"_tag":"None"}},"readme":"A simple package including common unicode logic [symbols](https://en.wikipedia.org/wiki/List_of_logic_symbols).\n\n### Installation\n```\nespanso install logic-symbols\n```\n\n### Usage\n\nThe following basic symbols are included, but feel free to add more!\n\nKeyword | Emoji\n--- | ---\n`:not` | ¬\n`:and` | ∧\n`:or` | ∨\n`:xor` | ⊕\n`:imp` | →\n`:biimp` | ⟷\n`:eq` | ≡\n`:true` | ⊤\n`:false` | ⊥\n`:all` | ∀\n`:exists` | ∃\n","packageYml":[{"name":"package.yml","content":"matches:\n  - trigger: \":not\"\n    replace: \"¬\"\n  - trigger: \":and\"\n    replace: \"∧\"\n  - trigger: \":or\"\n    replace: \"∨\"\n  - trigger: \":xor\"\n    replace: \"⊕\"\n  - triggers: [\":imp\", \":if\"]\n    replace: \"→\"\n  - triggers: [\":bimp\", \":iff\"]\n    replace: \"↔\"\n  - triggers: [\":eq\", \":def\"]\n    replace: \"≡\"\n  - triggers: [\":true\", \":top\"]\n    replace: \"⊤\"\n  - triggers: [\":false\", \":bot\"]\n    replace: \"⊥\"\n  - trigger: \":forall\"\n    replace: \"∀\"\n  - trigger: \":exists\"\n    replace: \"∃\"\n  - trigger: \":proves\"\n    replace: \"⊢\"\n  - trigger: \":models\"\n    replace: \"⊨\"\n"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"A simple package including common unicode logic \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/List_of_logic_symbols\",\n        children: \"symbols\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"espanso install logic-symbols\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following basic symbols are included, but feel free to add more!\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Keyword\"\n          }), _jsx(_components.th, {\n            children: \"Emoji\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":not\"\n            })\n          }), _jsx(_components.td, {\n            children: \"¬\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":and\"\n            })\n          }), _jsx(_components.td, {\n            children: \"∧\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":or\"\n            })\n          }), _jsx(_components.td, {\n            children: \"∨\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":xor\"\n            })\n          }), _jsx(_components.td, {\n            children: \"⊕\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":imp\"\n            })\n          }), _jsx(_components.td, {\n            children: \"→\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":biimp\"\n            })\n          }), _jsx(_components.td, {\n            children: \"⟷\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":eq\"\n            })\n          }), _jsx(_components.td, {\n            children: \"≡\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":true\"\n            })\n          }), _jsx(_components.td, {\n            children: \"⊤\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":false\"\n            })\n          }), _jsx(_components.td, {\n            children: \"⊥\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":all\"\n            })\n          }), _jsx(_components.td, {\n            children: \"∀\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \":exists\"\n            })\n          }), _jsx(_components.td, {\n            children: \"∃\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}