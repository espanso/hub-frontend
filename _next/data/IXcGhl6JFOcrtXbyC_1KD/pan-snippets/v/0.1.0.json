{"pageProps":{"packageRepo":{"package":{"id":"pan-snippets-0.1.0","name":"pan-snippets","author":"Markus Schapdick","description":"Snippets for Palo Alto Networks Firewalls and Panorama","title":"PAN snippets","version":"0.1.0","tags":["utility","palo-alto-networks","firewall","ngfw","networking","infosec"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/pan-snippets-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/pan-snippets-0.1.0-sha256.txt"},"manifest":{"name":"pan-snippets","title":"PAN snippets","description":"Snippets for Palo Alto Networks Firewalls and Panorama","homepage":{"_tag":"Some","value":"https://github.com/itsamemarkus/espanso-pan"},"version":"0.1.0","author":"Markus Schapdick","tags":["utility","palo-alto-networks","firewall","ngfw","networking","infosec"]},"readme":"# Espanso PAN\n\nAn [espanso](https://espanso.org/) package for generating\n\n- monitor filter syntax\n- policy filter syntax\n- CLI commands\n\nfor Palo Alto Networks Next Generation Firewalls and Panorama.\n\nEspanso is a text expander.\n\nThe goal is to save time for daily troubleshooting and admin tasks. Triggers should also work, if you do them in a remote session, because it's just like you'd type the characters yourself.\n\nAll triggers start with `:p` followed by a keyword. For this README file the following convention is used:\n\n- `:p` trigger identifier for this Espanso package\n- `keyword` followed by keyword to trigger the specific action. Goal: Easy to remember\n- `<dynamic>` (only required for a few triggers) dynamic regex part that is required for the completion to work.\n\nThe list of commands in this README is not exhaustive. You can see all in the `package.yml` of this package.\n\n## Examples Monitor Filter Syntax\n\n### less/greater then or equal custom time\n\nSyntax: `:pleq<time>` and `:pgeq<time>`\n\nExample: `:pleq1842` will be replaced by `( receive_time leq '2025/05/13 18:42:00' )`\n\n![](https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pgeq1842-pleq1852.gif)\n\n### multiple choice insert current clipboard\n\nSyntax: `:pclip`\n\nExample: `:plcip` offers a choice, and then it uses your clipboard content to build the filter syntax. Might help, if you have to manually copy from a ticketing system or similar sources.\n\n![](https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pclip.gif)\n\n### source and destination actions\n\nSyntax: `:psrcip` or `:pdstip` or `:psrczone` or ...\n\nExample: `psrcip` will be replaced by `( addr.src in '' )` with the cursor position in quotes.\n\n![](https://github.com/itsamemarkus/espanso-pan/raw/main/assets/psrcip-pdstip.gif)\n\n### filter for specific traffic\n\nSyntax: `:pallow`, `:pdeny`, `:paction`, `:p0b`\n\nExample: `:pallow` expands to ( action eq 'allow' )\n![](https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pallow-etc.gif)\n\n## Examples: Filter Policies\n\nSyntax: `:pdisabled`, `:pnolog`, `:pname`\n\nExample: `:pnolog` expands to `(log-end eq 'no')` to show policies with no logging enabled\n\n![](https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pnolog-etc.gif)\n\n## Examples: CLI commands\n\n### Set packet capture stage filenames based on current date\n\n`:pcapfiles` expands to\n\n```text\ndebug dataplane packet-diag set capture stage receive file 2025-05-14_00-24_rc\ndebug dataplane packet-diag set capture stage firewall file 2025-05-14_00-24_fw\ndebug dataplane packet-diag set capture stage transmit file 2025-05-14_00-24_tm\ndebug dataplane packet-diag set capture stage drop file 2025-05-14_00-24_dr\n```\n\nwhere the filename contains the current date and time.\n\n![](https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pcapfiles.gif)\n\n### Set packet capture filter with CIDR source and/or destination range\n\n`:pcapfilter` opens a form and expands to\n\n```text\ndebug dataplane packet-diag set filter match source 10.13.37.42 source-netmask 24 destination 9.9.9.9 destination-netmask 32\n```\n\n![](https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pcapfilter.gif)\n\n### capture helpers\n\n`:pcapon` expands to `debug dataplane packet-diag set capture on`\n\n`:pcapoff` expands to `debug dataplane packet-diag set capture off`\n\n`:pcapcounter` expands to `show counter global filter packet-filter yes delta yes`\n\n### lookup route in FIB\n\n`:proutelookup` expands to `test routing fib-lookup virtual-router default ip`\n\n### export TSF file\n\n`:ptsf` shows a form to enter scp/ssh details\n\n![](https://github.com/itsamemarkus/espanso-pan/raw/main/assets/ptsf.gif)\n\nand expands to the command that exports the tech support file via scp.\n\n### MISC commands\n\n`:ptopm` top for management-plane expands to `show system resources follow`\n\n`:ptopd` top for data-plane expands to `show running resource-monitor`\n\n`:pike` expands to `show vpn ike-sa gateway`\n\n`:pipsec` expands to `show vpn ipsec-sa tunnel`\n\n`:pfqdn` expands to `show dns-proxy fqdn all`\n\nand more. Check the source of this package.\n\n## Contributing: Syntax, trigger considerations\n\nWhen I initially had the idea to use [Espanso](https://espanso.org/) for this, I thought of having separate triggers for monitor filters, policy filters and terminal commands. Something like\n\n- p**M**srcip\n- p**P**name\n- p**T**info\n\nI noticed quite fast that those triggers are harder to remember and decided to just prepend everything with `:p` and then use very easy to remember names, if possible I used keywords from the original syntax and I even preferred slightly longer ones, like `:pallow` over `:pall` (or so). I'm trying to include commands that might be used very frequently by the majority of admins and troubleshooters.\n\nAlthough Espanso [shell extensions](https://espanso.org/docs/matches/extensions/#shell-extension) can be very powerful, I'm trying to avoid using them, so that everything works universally on Linux, Mac and Windows and with no dependencies.\n\nI'm also trying to not include any destructive commands like clearing firewall logs,shutting down the firewall or resetting sc3. You can easily extend your own config with those, if you need them frequently.\n\nContributions welcome.\n","packageYml":[{"name":"package.yml","content":"####################\n# global variables #\n####################\n\nglobal_vars:\n  - name: clipb\n    type: clipboard\n\nmatches:\n\n  ##################\n  # Filter Monitor #\n  ##################\n\n  - regex: \":pleq(?P<hour>\\\\d{2})(?P<minute>\\\\d{2})\"\n    # label: less equal time, regex time extraction. Example: :pleq2035\n    replace: \"( receive_time leq '{{datetime}}' )\"\n    vars:\n      - name: today\n        type: date\n        params:\n          format: \"%Y/%m/%d\"\n      - name: datetime\n        type: echo\n        params:\n          echo: \"{{today}} {{hour}}:{{minute}}:00\"\n\n  - regex: \":pgeq(?P<hour>\\\\d{2})(?P<minute>\\\\d{2})\"\n    # label: greater equal time, regex time extraction. Example: pgeq2145\n    replace: \"( receive_time geq '{{datetime}}' )\"\n    vars:\n      - name: today\n        type: date\n        params:\n          format: \"%Y/%m/%d\"\n      - name: datetime\n        type: echo\n        params:\n          echo: \"{{today}} {{hour}}:{{minute}}:00\"\n\n\n  ### clipboard block start ###\n  - trigger: :pclip\n    label: \"clipboard: source IP\"\n    replace: \"( addr.src in '{{clipb}}' )\"\n\n  - trigger: :pclip\n    label: \"clipboard: destionation IP\" \n    replace: \"( addr.dst in '{{clipb}}' )\"\n\n  - trigger: :pclip\n    label: \"clipboard: source user\"\n    replace: \"( user.src in '{{clipb}}' )\"\n\n  - trigger: :pclip\n    label: \"clipboard: destination user\" \n    replace: \"( user.dst in '{{clipb}}' )\"\n\n  - trigger: :pclip\n    label: \"clipboard: source port\" \n    replace: \"( port.src in '{{clipb}}' )\"\n\n  - trigger: :pclip\n    label: \"clipboard: destination port\" \n    replace: \"( port.dst in '{{clipb}}' )\"\n\n  - trigger: :pclip\n    label: \"clipboard: source zone\" \n    replace: \"( zone.src in '{{clipb}}' )\"\n\n  - trigger: :pclip\n    label: \"clipboard: destnation zone\" \n    replace: \"( zone.dst in '{{clipb}}' )\"\n  ### clipboard block end ###\n\n\n  - trigger: :psrcip\n    # label: Sourc√ße IP\n    replace: \"( addr.src in '$|$' )\"\n\n  - trigger: :pdstip\n    # label: Destination IP\n    replace: \"( addr.dst in '$|$' )\"\n\n  - trigger: :psrcuser\n    # label: Username\n    replace: \"(user.src eq '$|$')\"\n\n  - trigger: :pdstuser\n    # label: Username\n    replace: \"(user.dst eq '$|$')\"\n\n  - trigger: :psrcport\n    # label: Source Port\n    replace: \"(port.src eq '$|$')\"\n\n  - trigger: :pdstport\n    # label: Destination Port\n    replace: \"(port.dst eq '$|$')\"\n\n  - trigger: :psrczone\n    # label: Source Zone\n    replace: \"(zone.src eq '$|$')\"\n\n  - trigger: :pdstzone\n    # label: Destionation Zone\n    replace: \"(zone.dst eq '$|$')\"\n \n  - trigger: :papp\n    # label: App\n    replace: \"(app eq '$|$')\"\n\n  - trigger: :pdecrypt\n    # label: Decrypted Traffic\n    replace: \"( flags has proxy )\"\n\n  - trigger: :pnodecrypt\n    # label: Traffic that is not decrypted\n    replace: \"!( flags has proxy )\"\n\n  - trigger: :pallow\n    # label: Allowed Traffic\n    replace: ( action eq 'allow' )\n\n  - trigger: :pdeny\n    # label: Denied traffic\n    replace: \"( action eq 'deny' )\"\n\n  - trigger: \":paction\"\n    # label: Traffic action\n    replace: \"( action eq {{form1.action_type}} )\"\n    vars:\n      - name: form1\n        type: form\n        params:\n          layout: |\n            Which Action?\n            Action: [[action_type]]\n          fields:\n            action_type:\n              type: choice\n              values:\n                - allow\n                - deny\n                - drop\n                - reset-client\n                - reset-server\n                - reset-both\n                - drop-icmp\n\n  - trigger: \":p0b\"\n    # label: Sessions with no return traffic\n    replace: \"( bytes_received eq '0' )\"\n\n\n  ####################\n  # Filter  Policies #\n  ####################\n\n  - trigger: :pdisabled\n    replace: \"(disabled eq 'yes' )\"\n\n  - trigger: :pnolog\n    # label: only show policies where traffic at session end is disabled\n    replace: \"(log-end eq 'no')\"\n\n  - trigger: \":pname\"\n    # label: Shows policies containing string\n    replace: \"(name contains '$|$')\"\n\n\n  #######\n  # CLI #\n  #######\n\n  - trigger: \":pcapfiles\"\n    label: \"PAN Terminal: capture files >> debug dataplane packet-diag set capture stage...\" \n    # sets filenames for all capture stages: receive, firewall, transmit and drop\n    replace: |\n      debug dataplane packet-diag set capture stage receive file {{mydate}}_rc\n      debug dataplane packet-diag set capture stage firewall file {{mydate}}_fw\n      debug dataplane packet-diag set capture stage transmit file {{mydate}}_tm\n      debug dataplane packet-diag set capture stage drop file {{mydate}}_dr\n    vars:\n      - name: mydate\n        type: date\n        params:\n          format: \"%Y-%m-%d_%H-%M\"\n\n  - trigger: \":pcapfilter\"\n    label: \"PAN Terminal: capture filter >> debug dataplane packet-diag set filter...\"\n    # interactively sets the capture filter, compared to web UI it's possible to set a subnet mask here\n    replace: \"debug dataplane packet-diag set filter match source {{form1.src}} source-netmask {{form1.srcnetmask}} destination {{form1.dst}} destination-netmask {{form1.dstnetmask}}\"\n    vars:\n      - name: form1\n        type: form\n        params:\n          layout: |\n            Source IP: [[src]]\n            Source Netmask (CIDR): [[srcnetmask]]\n            Destination IP: [[dst]]\n            Destination Netmask: [[dstnetmask]]\n\n  - trigger: \":pcapcounter\"\n    label: \"PAN Terminal: capture counter >> show counter global filter packet-filter yes delta yes\"\n    replace: \"show counter global filter packet-filter yes delta yes\"\n\n  - trigger: \":pcapon\"\n    label: \"PAN Terminal: capture on >> debug dataplane packet-diag set capture on\"\n    replace: debug dataplane packet-diag set capture on\n\n  - trigger: \":pcapoff\"\n    label: \"PAN Terminal: Capture off >> debug dataplane packet-diag set capture off\"\n    replace: debug dataplane packet-diag set capture off\n\n  - trigger: \":pcapclear\"\n    label: \"PAN Terminal: Capture clear settings >> debug dataplane packet-diag clear all\"\n    replace: debug dataplane packet-diag clear all\n\n  - trigger: \":pcapmgmt\"\n    label: \"PAN Terminal: Capture mgmt plane >> tcpdump\"\n    replace: \"tcpdump snaplen 0 filter 'src net {{form1.src}}/{{form1.srcnetmask}} and port {{form1.dstport}}'\"\n    vars:\n      - name: form1\n        type: form\n        params:\n          layout: |\n            Source IP: [[src]]\n            Source Netmask: [[srcnetmask]]\n            Destination port: [[dstport]]\n\n  - trigger: \":proutelookup\"\n    label: \"PAN Terminal: route >> test routing fib-lookup virtual-router default ip\"\n    replace: \"test routing fib-lookup virtual-router default ip $|$\"\n\n  - trigger: \":plogexport\"\n    label: \"PAN Terminal: Export log files\"\n    replace: \"scp export log-file management remote-port {{form1.port}} to {{form1.user}}@{{form1.host}}:{{form1.path}}\"\n    vars:\n      - name: form1\n        type: form\n        params:\n          layout: |\n            User: [[user]]\n            Host: [[host]]\n            Path: [[path]]\n            Port: [[port]]\n          fields:\n            port:\n              default: \"22\"\n\n  - trigger: \":ptsf\"\n    label: \"PAN Terminal: Export tech support file\"\n    replace: \"scp export tech-support remote-port {{form1.port}} to {{form1.user}}@{{form1.host}}:{{form1.path}}\"\n    vars:\n      - name: form1\n        type: form\n        params:\n          layout: |\n            User: [[user]]\n            Host: [[host]]\n            Path: [[path]]\n            Port: [[port]]\n          fields:\n            port:\n              default: \"22\"\n\n\n  - trigger: \":ptopm\"\n    replace: \"show system resources follow\"\n\n  - trigger: \":ptopd\"\n    replace: \"show running resource-monitor\"\n\n  - trigger: :pjobs\n    replace: \"show jobs all\"\n\n  - trigger: :plicense\n    replace: \"show license info\"\n\n  - trigger: :pps\n    replace: \"show system software status\"\n\n  - trigger: \":pdhcp\"\n    replace:  \"show dhcp server lease interface all\"\n\n  - trigger: \":ppbf\"\n    replace:  \"show session packet-buffer-protection\"\n\n  - trigger: \":pdisk\"\n    replace: \"show system disk-space\"\n\n  - trigger: \":pike\"\n    replace: \"show vpn ike-sa gateway\"\n\n  - trigger: \":pipsec\"\n    replace: \"show vpn ipsec-sa tunnel\"\n\n  - trigger: \":pgroups\"\n    replace: \"show user group list\"\n\n  - trigger: \":pfqdn\"\n    replace: \"show dns-proxy fqdn all\"\n\n\n"}],"license":{"_tag":"Some","value":"MIT License\n\nCopyright (c) [2025] [Markus Schapdick]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    img: \"img\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Espanso PAN\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An \", _jsx(_components.a, {\n        href: \"https://espanso.org/\",\n        children: \"espanso\"\n      }), \" package for generating\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"monitor filter syntax\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"policy filter syntax\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"CLI commands\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"for Palo Alto Networks Next Generation Firewalls and Panorama.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Espanso is a text expander.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The goal is to save time for daily troubleshooting and admin tasks. Triggers should also work, if you do them in a remote session, because it's just like you'd type the characters yourself.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All triggers start with \", _jsx(_components.code, {\n        children: \":p\"\n      }), \" followed by a keyword. For this README file the following convention is used:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \":p\"\n        }), \" trigger identifier for this Espanso package\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"keyword\"\n        }), \" followed by keyword to trigger the specific action. Goal: Easy to remember\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"<dynamic>\"\n        }), \" (only required for a few triggers) dynamic regex part that is required for the completion to work.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The list of commands in this README is not exhaustive. You can see all in the \", _jsx(_components.code, {\n        children: \"package.yml\"\n      }), \" of this package.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Examples Monitor Filter Syntax\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"less/greater then or equal custom time\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Syntax: \", _jsx(_components.code, {\n        children: \":pleq<time>\"\n      }), \" and \", _jsx(_components.code, {\n        children: \":pgeq<time>\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Example: \", _jsx(_components.code, {\n        children: \":pleq1842\"\n      }), \" will be replaced by \", _jsx(_components.code, {\n        children: \"( receive_time leq '2025/05/13 18:42:00' )\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pgeq1842-pleq1852.gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"multiple choice insert current clipboard\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Syntax: \", _jsx(_components.code, {\n        children: \":pclip\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Example: \", _jsx(_components.code, {\n        children: \":plcip\"\n      }), \" offers a choice, and then it uses your clipboard content to build the filter syntax. Might help, if you have to manually copy from a ticketing system or similar sources.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pclip.gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"source and destination actions\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Syntax: \", _jsx(_components.code, {\n        children: \":psrcip\"\n      }), \" or \", _jsx(_components.code, {\n        children: \":pdstip\"\n      }), \" or \", _jsx(_components.code, {\n        children: \":psrczone\"\n      }), \" or ...\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Example: \", _jsx(_components.code, {\n        children: \"psrcip\"\n      }), \" will be replaced by \", _jsx(_components.code, {\n        children: \"( addr.src in '' )\"\n      }), \" with the cursor position in quotes.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/itsamemarkus/espanso-pan/raw/main/assets/psrcip-pdstip.gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"filter for specific traffic\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Syntax: \", _jsx(_components.code, {\n        children: \":pallow\"\n      }), \", \", _jsx(_components.code, {\n        children: \":pdeny\"\n      }), \", \", _jsx(_components.code, {\n        children: \":paction\"\n      }), \", \", _jsx(_components.code, {\n        children: \":p0b\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Example: \", _jsx(_components.code, {\n        children: \":pallow\"\n      }), \" expands to ( action eq 'allow' )\\n\", _jsx(_components.img, {\n        src: \"https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pallow-etc.gif\",\n        alt: \"\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Examples: Filter Policies\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Syntax: \", _jsx(_components.code, {\n        children: \":pdisabled\"\n      }), \", \", _jsx(_components.code, {\n        children: \":pnolog\"\n      }), \", \", _jsx(_components.code, {\n        children: \":pname\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Example: \", _jsx(_components.code, {\n        children: \":pnolog\"\n      }), \" expands to \", _jsx(_components.code, {\n        children: \"(log-end eq 'no')\"\n      }), \" to show policies with no logging enabled\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pnolog-etc.gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Examples: CLI commands\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Set packet capture stage filenames based on current date\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":pcapfiles\"\n      }), \" expands to\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"debug dataplane packet-diag set capture stage receive file 2025-05-14_00-24_rc\\ndebug dataplane packet-diag set capture stage firewall file 2025-05-14_00-24_fw\\ndebug dataplane packet-diag set capture stage transmit file 2025-05-14_00-24_tm\\ndebug dataplane packet-diag set capture stage drop file 2025-05-14_00-24_dr\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"where the filename contains the current date and time.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pcapfiles.gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Set packet capture filter with CIDR source and/or destination range\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":pcapfilter\"\n      }), \" opens a form and expands to\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"debug dataplane packet-diag set filter match source 10.13.37.42 source-netmask 24 destination 9.9.9.9 destination-netmask 32\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/itsamemarkus/espanso-pan/raw/main/assets/pcapfilter.gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"capture helpers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":pcapon\"\n      }), \" expands to \", _jsx(_components.code, {\n        children: \"debug dataplane packet-diag set capture on\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":pcapoff\"\n      }), \" expands to \", _jsx(_components.code, {\n        children: \"debug dataplane packet-diag set capture off\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":pcapcounter\"\n      }), \" expands to \", _jsx(_components.code, {\n        children: \"show counter global filter packet-filter yes delta yes\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"lookup route in FIB\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":proutelookup\"\n      }), \" expands to \", _jsx(_components.code, {\n        children: \"test routing fib-lookup virtual-router default ip\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"export TSF file\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":ptsf\"\n      }), \" shows a form to enter scp/ssh details\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/itsamemarkus/espanso-pan/raw/main/assets/ptsf.gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"and expands to the command that exports the tech support file via scp.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"MISC commands\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":ptopm\"\n      }), \" top for management-plane expands to \", _jsx(_components.code, {\n        children: \"show system resources follow\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":ptopd\"\n      }), \" top for data-plane expands to \", _jsx(_components.code, {\n        children: \"show running resource-monitor\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":pike\"\n      }), \" expands to \", _jsx(_components.code, {\n        children: \"show vpn ike-sa gateway\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":pipsec\"\n      }), \" expands to \", _jsx(_components.code, {\n        children: \"show vpn ipsec-sa tunnel\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":pfqdn\"\n      }), \" expands to \", _jsx(_components.code, {\n        children: \"show dns-proxy fqdn all\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"and more. Check the source of this package.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Contributing: Syntax, trigger considerations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When I initially had the idea to use \", _jsx(_components.a, {\n        href: \"https://espanso.org/\",\n        children: \"Espanso\"\n      }), \" for this, I thought of having separate triggers for monitor filters, policy filters and terminal commands. Something like\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"p\", _jsx(_components.strong, {\n          children: \"M\"\n        }), \"srcip\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"p\", _jsx(_components.strong, {\n          children: \"P\"\n        }), \"name\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"p\", _jsx(_components.strong, {\n          children: \"T\"\n        }), \"info\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I noticed quite fast that those triggers are harder to remember and decided to just prepend everything with \", _jsx(_components.code, {\n        children: \":p\"\n      }), \" and then use very easy to remember names, if possible I used keywords from the original syntax and I even preferred slightly longer ones, like \", _jsx(_components.code, {\n        children: \":pallow\"\n      }), \" over \", _jsx(_components.code, {\n        children: \":pall\"\n      }), \" (or so). I'm trying to include commands that might be used very frequently by the majority of admins and troubleshooters.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Although Espanso \", _jsx(_components.a, {\n        href: \"https://espanso.org/docs/matches/extensions/#shell-extension\",\n        children: \"shell extensions\"\n      }), \" can be very powerful, I'm trying to avoid using them, so that everything works universally on Linux, Mac and Windows and with no dependencies.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I'm also trying to not include any destructive commands like clearing firewall logs,shutting down the firewall or resetting sc3. You can easily extend your own config with those, if you need them frequently.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Contributions welcome.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}