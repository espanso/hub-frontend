{"pageProps":{"packageRepo":{"package":{"id":"timezone-date-0.1.0","name":"timezone-date","author":"Stephen Meech","description":"A package that uses Python scripts to offer a choice from the full set of worldwide timezones, returning the current date and time there.","title":"Timezone Date","version":"0.1.0","tags":["time","date","timezone","python"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/timezone-date-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/timezone-date-0.1.0-sha256.txt"},"manifest":{"name":"timezone-date","title":"Timezone Date","description":"A package that uses Python scripts to offer a choice from the full set of worldwide timezones, returning the current date and time there.","homepage":{"_tag":"Some","value":"https://github.com/smeech"},"version":"0.1.0","author":"Stephen Meech","tags":["time","date","timezone","python"]},"readme":"# Timezone Date\n\nA single trigger that uses two Python scripts to offer a choice from the full set of worldwide timezones, returning the current date and time there.\n\n(Espanso's inbuilt `date` extension is handy, but very limited, especially because it can't accept a `{{variable}}` for its `offset:` value. I'll publish another small package `date-offset` to illustrate other ways in which this can be done.)\n\nTwo versions of the match file are included:\n\n1. `package.yml` uses the `pytz` library and should work with any version of Python\n2. `_package.yml` uses `zoneinfo`, which is part of modern editions (v3.9+) of Python, and should be a few milliseconds faster\n\nTo try the latter, rename the first file to anything you like, with an underscore `_` as its first character so that Espanso ignores it, then *remove* the underscore prefixing the second file's name.\n\nIn the middle of each file is a `default:` line, currently:\n\n```yml\n              default: Europe/London\n```\n\nOnce you've tried the trigger, change this timezone value to take you quickly to a part of the list that suits you most - it's a long list!\n\nThere is scope to modify the code to:\n\n- in the last line, change the text, and date format output\n- hard-code a timezone into the third variable (if you only need one, for example),  dispensing with the first two variables providing the choice\n- include some sort of time offset (do so in the final section but *prior* to the conversion of UTC time to the specified timezone) - see also the `date-offset` package\n\nStephen Meech\n(@smeech)\n","packageYml":[{"name":"package.yml","content":"# yaml-language-server: $schema=https://raw.githubusercontent.com/espanso/espanso/dev/schemas/match.schema.json\n\n# This version should work on most versions of Python\n# but may be slower than the one which uses `zoneinfo`\n\n# Amend the `default: Europe/London` line 29 to your convenience\n\nmatches:\n  - trigger: :tzdate\n    replace: '{{output}}'\n    vars:\n      - name: zones\n        type: script\n        params:\n          args:\n            - python\n            - -c\n            - |\n              import pytz\n              print(\"\\n\".join(pytz.all_timezones))\n      - name: zone_choice\n        type: form\n        params:\n          layout: 'Pick a time-zone: [[zone]]'\n          fields:\n            zone:\n              type: list\n              values: '{{zones}}'\n              default: Europe/London # Change this to a timezone that suits you\n      - name: output\n        type: script\n        params:\n          args:\n            - python\n            - -c\n            - |\n              import pytz; from datetime import datetime\n              timezone = pytz.timezone('{{zone_choice.zone}}')\n              # Get the current date and time in UTC\n              utc_now = datetime.utcnow().replace(tzinfo=pytz.utc)\n              # Convert UTC time to the specified timezone\n              local_time = utc_now.astimezone(timezone)\n              print(\"Current date and time in\", timezone, \"is:\", local_time.strftime('%F %T'))"},{"name":"_package.yml","content":"# yaml-language-server: $schema=https://raw.githubusercontent.com/espanso/espanso/dev/schemas/match.schema.json\n\n# This version will work on newer (v3.9+) versions of Python\n# and is probably faster than the one which relies on `pytz`\n\n# To use it, rename this file, without the underscore `_` prefix\n# and rename the other WITH an underscore prefix.\n\n# Amend the `default: Europe/London` line 32 to suit yourself\n\nmatches:\n  - trigger: :tzdate\n    replace: '{{output}}'\n    vars:\n      - name: zones\n        type: script\n        params:\n          args:\n            - python\n            - -c\n            - |\n              from zoneinfo import available_timezones\n              print(\"\\n\".join(sorted(available_timezones())))\n      - name: zone_choice\n        type: form\n        params:\n          layout: 'Pick a time-zone: [[zone]]'\n          fields:\n            zone:\n              type: list\n              values: '{{zones}}'\n              default: Europe/London # Change this to a timezone that suits you\n      - name: output\n        type: script\n        params:\n          args:\n            - python\n            - -c\n            - |\n              from datetime import datetime; from zoneinfo import ZoneInfo\n              timezone = ZoneInfo('{{zone_choice.zone}}')\n              # Get the current UTC time\n              utc_now = datetime.utcnow()\n              # Convert UTC time to the specified timezone\n              local_time = utc_now.astimezone(timezone)\n              print(\"Current date and time in\", timezone, \"is:\", local_time.strftime('%F %T'))\n"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Timezone Date\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A single trigger that uses two Python scripts to offer a choice from the full set of worldwide timezones, returning the current date and time there.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"(Espanso's inbuilt \", _jsx(_components.code, {\n        children: \"date\"\n      }), \" extension is handy, but very limited, especially because it can't accept a \", _jsx(_components.code, {\n        children: \"{{variable}}\"\n      }), \" for its \", _jsx(_components.code, {\n        children: \"offset:\"\n      }), \" value. I'll publish another small package \", _jsx(_components.code, {\n        children: \"date-offset\"\n      }), \" to illustrate other ways in which this can be done.)\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Two versions of the match file are included:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"package.yml\"\n        }), \" uses the \", _jsx(_components.code, {\n          children: \"pytz\"\n        }), \" library and should work with any version of Python\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"_package.yml\"\n        }), \" uses \", _jsx(_components.code, {\n          children: \"zoneinfo\"\n        }), \", which is part of modern editions (v3.9+) of Python, and should be a few milliseconds faster\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To try the latter, rename the first file to anything you like, with an underscore \", _jsx(_components.code, {\n        children: \"_\"\n      }), \" as its first character so that Espanso ignores it, then \", _jsx(_components.em, {\n        children: \"remove\"\n      }), \" the underscore prefixing the second file's name.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the middle of each file is a \", _jsx(_components.code, {\n        children: \"default:\"\n      }), \" line, currently:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yml\",\n        children: \"              default: Europe/London\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once you've tried the trigger, change this timezone value to take you quickly to a part of the list that suits you most - it's a long list!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There is scope to modify the code to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"in the last line, change the text, and date format output\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"hard-code a timezone into the third variable (if you only need one, for example),  dispensing with the first two variables providing the choice\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"include some sort of time offset (do so in the final section but \", _jsx(_components.em, {\n          children: \"prior\"\n        }), \" to the conversion of UTC time to the specified timezone) - see also the \", _jsx(_components.code, {\n          children: \"date-offset\"\n        }), \" package\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Stephen Meech\\n(@smeech)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}