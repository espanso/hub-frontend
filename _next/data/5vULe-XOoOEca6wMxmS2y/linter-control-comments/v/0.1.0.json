{"pageProps":{"packageRepo":{"package":{"id":"linter-control-comments-0.1.0","name":"linter-control-comments","author":"Katrin Leinweber","description":"A collection of linter control comments (currently: Golint, Rubocop, Clippy, and Shellcheck)","title":"Linter Control Comments","version":"0.1.0","tags":["development","linter","go","ruby","rust","shell"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/linter-control-comments-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/linter-control-comments-0.1.0-sha256.txt"},"manifest":{"name":"linter-control-comments","title":"Linter Control Comments","description":"A collection of linter control comments (currently: Golint, Rubocop, Clippy, and Shellcheck)","homepage":{"_tag":"Some","value":"https://github.com/katrinleinweber/espanso-hub/tree/package-linter-control-comments"},"version":"0.1.0","author":"Katrin Leinweber","tags":["development","linter","go","ruby","rust","shell"]},"readme":"# Linter Control Comments\n\nA collection of linter control comments for:\n\nLanguage | Linter\n-- | --\nGo | [Golint](https://golangci-lint.run/)\nRuby | [Rubocop](https://rubocop.org)\nRust | [Clippy](https://doc.rust-lang.org/stable/clippy/)\nShell | [Shellcheck](https://www.shellcheck.net/)\n\n## How to use\n\n1. Copy a particular linting rule name (from docs, terminal output, etc.).\n1. Triggering the espansion. Most `replace`ments use the `{{clipboard}}`.\n\n## Trigger composition\n\nSymbol | Why that one in particular?\n-- | --\n`#` | Comment symbol for the relevant language.\n`rb` | Abbreviated name of the linter, ideally following its syllables.\n`d` | First letter of the linter's keyword\n\nThis hopefully helps to reuse existing muscle memory,\nfrom having already used these linters manually.\n\n## Espansions\n\nTrigger | Replace\n-- | --\n`/nol` | `//nolint:{{clipboard}}`\n`/noa` | `//nolint:all`\n`#rcd` | `# rubocop:disable {{clipboard}}`\n`#rce` | `# rubocop:enable {{clipboard}}`\n`#rct` | `# rubocop:todo {{clipboard}}`\n`#cla` | `#[allow({{clipboard}})]`\n`#clw` | `#[warn({{clipboard}})]`\n`#cld` | `#[deny({{clipboard}})]`\n`#clp` | `#![deny(clippy::pedantic)]`\n`#scd` | `# shellcheck disable={{clipboard}}`\n","packageYml":[{"name":"package.yml","content":"global_vars:\n  - name: \"clipboard\"\n    type: \"clipboard\"\n\nmatches:\n\n  ### Go\n  # https://golangci-lint.run/usage/false-positives/#nolint-directive\n  - trigger: \"/nol\"\n    replace: \"//nolint:{{clipboard}}\"\n  - trigger: \"/noa\"\n    replace: \"//nolint:all\"\n\n  ### Ruby\n  # https://docs.rubocop.org/rubocop/configuration.html#disabling-cops-within-source-code\n  - trigger: \"#rcd\"\n    replace: \"# rubocop:disable {{clipboard}}\"\n  - trigger: \"#rce\"\n    replace: \"# rubocop:enable {{clipboard}}\"\n  - trigger: \"#rct\"\n    replace: \"# rubocop:todo {{clipboard}}\"\n\n  ### Rust\n  # https://doc.rust-lang.org/stable/clippy/usage.html#lint-configuration\n  # https://github.com/rust-lang/rust-clippy?tab=readme-ov-file#allowingdenying-lints\n  - trigger: \"#cla\"\n    replace: \"#[allow({{clipboard}})]\"\n  - trigger: \"#clw\"\n    replace: \"#[warn({{clipboard}})]\"\n  - trigger: \"#cld\"\n    replace: \"#[deny({{clipboard}})]\"\n  - trigger: \"#clp\"\n    replace: \"#![deny(clippy::pedantic)]\" # prone to false positives!\n\n  ### Shell\n  # https://github.com/koalaman/shellcheck/blob/master/shellcheck.1.md#directives\n  - trigger: \"#scd\"\n    replace: \"# shellcheck disable={{clipboard}}\"\n"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Linter Control Comments\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A collection of linter control comments for:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Language\"\n          }), _jsx(_components.th, {\n            children: \"Linter\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Go\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://golangci-lint.run/\",\n              children: \"Golint\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Ruby\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://rubocop.org\",\n              children: \"Rubocop\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Rust\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://doc.rust-lang.org/stable/clippy/\",\n              children: \"Clippy\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Shell\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://www.shellcheck.net/\",\n              children: \"Shellcheck\"\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How to use\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Copy a particular linting rule name (from docs, terminal output, etc.).\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Triggering the espansion. Most \", _jsx(_components.code, {\n          children: \"replace\"\n        }), \"ments use the \", _jsx(_components.code, {\n          children: \"{{clipboard}}\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Trigger composition\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Symbol\"\n          }), _jsx(_components.th, {\n            children: \"Why that one in particular?\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Comment symbol for the relevant language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"rb\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Abbreviated name of the linter, ideally following its syllables.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"d\"\n            })\n          }), _jsx(_components.td, {\n            children: \"First letter of the linter's keyword\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This hopefully helps to reuse existing muscle memory,\\nfrom having already used these linters manually.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Espansions\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Trigger\"\n          }), _jsx(_components.th, {\n            children: \"Replace\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/nol\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"//nolint:{{clipboard}}\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/noa\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"//nolint:all\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#rcd\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"# rubocop:disable {{clipboard}}\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#rce\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"# rubocop:enable {{clipboard}}\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#rct\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"# rubocop:todo {{clipboard}}\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#cla\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#[allow({{clipboard}})]\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#clw\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#[warn({{clipboard}})]\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#cld\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#[deny({{clipboard}})]\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#clp\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#![deny(clippy::pedantic)]\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"#scd\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"# shellcheck disable={{clipboard}}\"\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}