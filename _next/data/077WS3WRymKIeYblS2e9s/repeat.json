{"pageProps":{"packageRepo":{"package":{"id":"repeat-1.0.0","name":"repeat","author":"Dickson Law","description":"Utility for typing text on repeat.","title":"Repeat","version":"1.0.0","tags":["repeat","repetition","repetitive"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/repeat-1.0.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/repeat-1.0.0-sha256.txt"},"manifest":{"author":"Dickson Law","description":"Utility for typing text on repeat.","title":"Repeat","name":"repeat","homepage":{"_tag":"Some","value":"https://github.com/dicksonlaw583/espanso-repeat"},"version":"1.0.0","tags":["repeat","repetition","repetitive"]},"readme":"# Repeat\n\nA simple package for typing a piece of text on repeat.\n\n## Requirements\n\n- Espanso 2.x or higher\n- Python 3.x\n\n## Installation\n\n```\nespanso install repeat\n```\n\n## Triggers\n\n|  Trigger  | Description |\n|-----------|---------|\n| `;rep` (first character is a semicolon `;`) | Repeat a piece of text N times. |\n| `:rep` (first character is a colon `:`) | Repeat a text template over each row of a list of items. |\n| `^rep` | Repeat a text template over each row of a list of items (with customizable separators and support for row columns). |\n","packageYml":[{"name":"package.yml","content":"global_vars:\n  - name: repeat_python\n    type: echo\n    params:\n      echo: \"python\" # Replace this with the path to your Python instance if automatic detection is failing\n\nmatches:\n  - trigger: \";rep\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"Repeat text\\n\\nTimes:\\n[[times]]\\nText:\\n[[text]]\\nSeparator Between Repeats (JSON):\\n[[separator]]\"\n          fields:\n            text:\n              multiline: true\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{repeat_python}}\"\n            - \"%CONFIG%/match/packages/repeat/repeat.py\"\n            - \"{{f.times}}\"\n            - \"{{f.separator}}\"\n            - \"{{f.text}}\"\n  - trigger: \":rep\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"Repeat text template\\n\\nTemplate Text:\\n[[template]]\\nItems (one per row):\\n[[items]]\\nSeparator Between Repeats (JSON):\\n[[separator]]\\nTemplate Placeholder:\\n[[placeholder]]\"\n          fields:\n            template:\n              multiline: true\n            items:\n              multiline: true\n            placeholder:\n              default: \"[]\"\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{repeat_python}}\"\n            - \"%CONFIG%/match/packages/repeat/foreach.py\"\n            - \"{{f.template}}\"\n            - \"{{f.separator}}\"\n            - \"{{f.placeholder}}\"\n            - \"{{f.items}}\"\n  - trigger: \"^rep\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"Repeat text template (extended)\\n\\nTemplate Text: [[template]]\\nItems: [[items]]\\nSeparator Between Repeats (JSON) [[repsep]]\\nItem Separator (JSON) [[rowsep]]\\nColumn Separator (JSON) [[colsep]]\\nTemplate Placeholder [[placeholder]]\"\n          fields:\n            template:\n              multiline: true\n            items:\n              multiline: true\n            rowsep:\n              default: \"\\\\n\"\n            colsep:\n              default: \"|\"\n            placeholder:\n              default: \"[N]\"\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{repeat_python}}\"\n            - \"%CONFIG%/match/packages/repeat/foreach_ext.py\"\n            - \"{{f.template}}\"\n            - \"{{f.placeholder}}\"\n            - \"{{f.rowsep}}\"\n            - \"{{f.colsep}}\"\n            - \"{{f.items}}\"\n            - \"{{f.repsep}}\""}],"license":{"_tag":"Some","value":"MIT License\n\nCopyright (c) 2025 Dickson Law\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Repeat\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A simple package for typing a piece of text on repeat.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Requirements\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Espanso 2.x or higher\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Python 3.x\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"espanso install repeat\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Triggers\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Trigger\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \";rep\"\n            }), \" (first character is a semicolon \", _jsx(_components.code, {\n              children: \";\"\n            }), \")\"]\n          }), _jsx(_components.td, {\n            children: \"Repeat a piece of text N times.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \":rep\"\n            }), \" (first character is a colon \", _jsx(_components.code, {\n              children: \":\"\n            }), \")\"]\n          }), _jsx(_components.td, {\n            children: \"Repeat a text template over each row of a list of items.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"^rep\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Repeat a text template over each row of a list of items (with customizable separators and support for row columns).\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["1.0.0"]},"__N_SSG":true}