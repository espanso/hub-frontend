{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"python-utils-0.1.0","name":"python-utils","author":"Kang Chen","description":"A python code snippet package for Espanso to reduce boilerplate code","title":"Python Utilities","version":"0.1.0","tags":["python","development"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/python-utils-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/python-utils-0.1.0-sha256.txt"},"manifest":{"name":"python-utils","title":"Python Utilities","description":"A python code snippet package for Espanso to reduce boilerplate code","version":"0.1.0","author":"Kang Chen","homepage":{"_tag":"Some","value":"https://github.com/kchenTTP/espanso-python-utils"},"tags":["python","development"]},"readme":"# Espanso Python Utils\n\nA python code snippet package for [Espanso](https://espanso.org/) to reduce boilerplate code.\n\n\n## Triggers\n\n| Trigger        | Command                                                                                                                                                                                                                                                                                         |\n| -------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| :pymain        | <pre>def main() -> None:<br><br>if \\_\\_name__ == \"\\_\\_main__\":<br>    main()</pre>                                                                                                                                                                                                              |\n| :pycls         | <pre>class :<br>    def \\_\\_init__(self) -> None:<br><br><br>    def method_1(self) -> None:<br></pre>                                                                                                                                                                                          |\n| :pydef         | <pre>def ():<br><br>    return</pre>                                                                                                                                                                                                                                                            |\n| :pymatch       | <pre>match :<br>    case :<br><br>    case _:<br></pre>                                                                                                                                                                                                                                         |\n| :pytry         | <pre>try:<br><br>except  as e:<br></pre>                                                                                                                                                                                                                                                        |\n| :pyboiler:args | <pre>import argparse<br><br>def main(args: argparse.Namespace) -> None:<br><br>if \\_\\_name__ == \"\\_\\_main__\":<br>    parser = argparse.ArgumentParser()<br><br>    parser.add_argument(\"\")<br><br>    args = parser.parse_args()<br>    main(args)</pre>                                        |\n| :pyboiler:log  | <pre>import logging<br><br>logger = logging.getLogger(__name__)<br><br>def main() -> None:<br>    logger.debug(\"Logger working\")<br><br>if \\_\\_name__ == \"\\_\\_main__\":<br>    logging.basicConfig(level=logging.DEBUG, format=\"%(levelname)s %(asctime)s: %(message)s\")<br><br>    main()</pre> |\n","packageYml":[{"name":"package.yml","content":"matches:\n  - trigger: \":pymain\"\n    replace: |\n              def main() -> None:\n                  $|$\n              \n              if __name__ == \"__main__\":\n                  main()\n  - trigger: \":pycls\"\n    replace: |\n              class $|$:\n                  def __init__(self) -> None:\n                      \n\n                  def method_1(self) -> None:\n                      \n  - trigger: \":pydef\"\n    replace: |\n              def $|$():\n                  \n                  return\n  - trigger: \":pymatch\"\n    replace: |\n              match $|$:\n                  case :\n                      \n                  case _:\n                      \n  - trigger: \":pytry\"\n    replace: |\n              try:\n                  \n              except $|$ as e:\n                  \n  - trigger: \":pyboiler:args\"\n    replace: |\n              import argparse\n              \n              def main(args: argparse.Namespace) -> None:\n                  \n              if __name__ == \"__main__\":\n                  parser = argparse.ArgumentParser()\n                  \n                  parser.add_argument(\"$|$\")\n                  \n                  args = parser.parse_args()\n                  main(args)\n  - trigger: \":pyboiler:log\"\n    replace: |\n              import logging\n\n              logger = logging.getLogger(__name__)\n              \n              def main() -> None:\n                  logger.debug(\"Logger working\")\n\n              if __name__ == \"__main__\":\n                  logging.basicConfig(level=logging.DEBUG, format=\"%(levelname)s %(asctime)s: %(message)s\")\n                  \n                  main()"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Espanso Python Utils\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A python code snippet package for \", _jsx(_components.a, {\n        href: \"https://espanso.org/\",\n        children: \"Espanso\"\n      }), \" to reduce boilerplate code.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Triggers\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Trigger\"\n          }), _jsx(_components.th, {\n            children: \"Command\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":pymain\"\n          }), _jsx(_components.td, {\n            children: _jsxs(\"pre\", {\n              children: [\"def main() -> None:\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"if __name__ == \\\"__main__\\\":\", _jsx(\"br\", {}), \"    main()\"]\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":pycls\"\n          }), _jsx(_components.td, {\n            children: _jsxs(\"pre\", {\n              children: [\"class :\", _jsx(\"br\", {}), \"    def __init__(self) -> None:\", _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {}), \"    def method_1(self) -> None:\", _jsx(\"br\", {})]\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":pydef\"\n          }), _jsx(_components.td, {\n            children: _jsxs(\"pre\", {\n              children: [\"def ():\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"    return\"]\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":pymatch\"\n          }), _jsx(_components.td, {\n            children: _jsxs(\"pre\", {\n              children: [\"match :\", _jsx(\"br\", {}), \"    case :\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"    case _:\", _jsx(\"br\", {})]\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":pytry\"\n          }), _jsx(_components.td, {\n            children: _jsxs(\"pre\", {\n              children: [\"try:\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"except  as e:\", _jsx(\"br\", {})]\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":pyboiler:args\"\n          }), _jsx(_components.td, {\n            children: _jsxs(\"pre\", {\n              children: [\"import argparse\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"def main(args: argparse.Namespace) -> None:\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"if __name__ == \\\"__main__\\\":\", _jsx(\"br\", {}), \"    parser = argparse.ArgumentParser()\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"    parser.add_argument(\\\"\\\")\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"    args = parser.parse_args()\", _jsx(\"br\", {}), \"    main(args)\"]\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":pyboiler:log\"\n          }), _jsx(_components.td, {\n            children: _jsxs(\"pre\", {\n              children: [\"import logging\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"logger = logging.getLogger(\", _jsx(_components.strong, {\n                children: \"name\"\n              }), \")\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"def main() -> None:\", _jsx(\"br\", {}), \"    logger.debug(\\\"Logger working\\\")\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"if __name__ == \\\"__main__\\\":\", _jsx(\"br\", {}), \"    logging.basicConfig(level=logging.DEBUG, format=\\\"%(levelname)s %(asctime)s: %(message)s\\\")\", _jsx(\"br\", {}), _jsx(\"br\", {}), \"    main()\"]\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"versions":["0.1.0"]},"__N_SSG":true}