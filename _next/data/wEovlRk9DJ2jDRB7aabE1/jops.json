{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"jops-0.1.0","name":"jops","author":"Alexander Ikensen","description":"Shortcuts for Joplin","title":"Joplin Shortcut","version":"0.1.0","tags":["shell","utility"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/jops-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/jops-0.1.0-sha256.txt"},"manifest":{"name":"jops","title":"Joplin Shortcut","description":"Shortcuts for Joplin","version":"0.1.0","author":"Alexander Ikensen","tags":["shell","utility"],"homepage":{"_tag":"None"}},"readme":"# Joplin Shortcut (jops)\n### Main features\n\n- `:jop` initiate the plugin: authorization of the plugin + setting up default notebook via external link\n- `:mn` make new note\n- `:mt` make new todo\n- `:ct` creating new todo from clipboard\n\n\n## How to install\n1. Install espanso\n2. in terminal run `espanso install jops`\n1. Enable Joplin's Web Clipper service \n\nhttps://user-images.githubusercontent.com/44114323/204137550-1bb7aa5f-dac4-468d-9d7e-8e85eb964b86.mp4\n\n## Usage\n0. Make sure Joplin and espanso are running\n1. Type`:jop` anywhere (not only in text fields) and press Grant authorization in Joplin. Optionally you can provide external link of the notebook of choice where your quick notes will land.\n3. Type `:mn` to create the first quick note\n\nhttps://user-images.githubusercontent.com/44114323/204137648-5d5135e4-3c25-44a9-a940-a58340e307ac.mp4\n\n### Other considerations\nIt doesn't work if Joplin isn't running, hence you should start it beforehand\n","packageYml":[{"name":"package.yml","content":"# Originally the package was written with global variables\n# but this has been changed for duplicated local variables üòí\n# because while espanso .deb worked just fine\n# AppImage didn't like it for some reason\n\n# TODO\n# ? clipboard todo due date menu :ctd\n# ? default tags\n# test suite\n# Notebook list & IDs: replace for-loop to while-loop; \n\n\n\nmatches:\n       \n# One time initialization screen\n  - trigger: :jop\n    replace: \"{{clientTokenSave}}{{parentsave}} Success üëç\"\n    vars:\n## Prompt user for auth token\n    - name: input\n      type: form\n      params:\n        layout: |\n            You're about to enable Joplin shortcuts üëç\n            \n            Please grant permission to access your notes\n            at the main Joplin screen\n            \n            Optionally you may set a default notebook \n            \n            by pasting its external link here ‚Üí [[parentid]]\n            \n            You can get this external link with\n            Right click on the notebook ‚Üí Copy external link\n\n## Creates a file with authorization token in default joplin folder\n# Saves Joplin's master api token directly\n# currently depreciated and replaced \n# with requesting this token every time an action is performed\n# because more secure\n\n#    - name: authsave\n#      type: shell\n#      params:\n#        cmd: \"echo {{input.token}} > ~/.config/joplin/.auth\" \n        \n    - name: parentsave\n      type: shell\n      params:\n        cmd: \"echo {{input.parentid}} | sed 's.joplin://x-callback-url/openFolder?id=..'> ~/.config/Joplin/.parentid\" \n        \n    - name: clientTokenSave\n      type: shell\n      params:\n        cmd: curl -X POST http://localhost:41184/auth | sed \"s/{.*\\\"auth_token\\\":\\\"\\([^\\\"]*\\).*}/\\1/g\" > ~/.config/Joplin/.auth\n\n# Make note\n  - trigger: :mn\n    replace: \"{{note}}\"\n    vars:\n    - name: data\n      type: form\n      params:\n        layout: \"[[text]]\"\n        \n    - name: authRead\n      type: shell\n      params:\n        cmd: cat ~/.config/Joplin/.auth\n\n    - name: masterToken\n      type: shell\n      params:\n        cmd: curl -X GET http://localhost:41184/auth/check?auth_token={{authRead}} | sed \"s/{.*\\\"token\\\":\\\"\\([^\\\"]*\\).*}/\\1/g\"\n        \n    - name: defaultNotebook\n      type: shell\n      params:\n        cmd: cat ~/.config/Joplin/.parentid \n        \n    - name: note\n      type: shell\n      params:\n        cmd: \"curl --silent --output /dev/null --data '{\\\"title\\\": \\\"üìì Quick note\\\", \\\"body\\\": \\\" {{data.text}} \\\", \\\"parent_id\\\": \\\"{{defaultNotebook}}\\\" }' http://localhost:41184/notes?token={{masterToken}}\"\n        \n# Make todo \n  - trigger: :mt\n    replace: \"{{todo}}\"\n    vars:\n    - name: data\n      type: form\n      params:\n        layout: \"[[text]]\"\n        \n    - name: authRead\n      type: shell\n      params:\n        cmd: cat ~/.config/Joplin/.auth  \n        \n    - name: masterToken\n      type: shell\n      params:\n        cmd: curl -X GET http://localhost:41184/auth/check?auth_token={{authRead}} | sed \"s/{.*\\\"token\\\":\\\"\\([^\\\"]*\\).*}/\\1/g\"\n        \n    - name: defaultNotebook\n      type: shell\n      params:\n        cmd: cat ~/.config/Joplin/.parentid \n        \n    - name: todo\n      type: shell\n      params:\n        cmd: \"curl --silent --output /dev/null --data '{\\\"title\\\": \\\"Quick todo ‚òëÔ∏è\\\", \\\"body\\\": \\\" {{data.text}} \\\", \\\"is_todo\\\": 1, \\\"parent_id\\\": \\\"{{defaultNotebook}}\\\" }' http://localhost:41184/notes?token={{masterToken}}\"\n# Clipboard todo\n\n  - trigger: :ct\n    replace: \"{{clipboardTodo}}\"\n    vars:\n          \n    - name: clipboard\n      type: clipboard\n    \n    - name: authRead\n      type: shell\n      params:\n        cmd: cat ~/.config/Joplin/.auth  \n# Requests a master token from Joplin and parses the output        \n    - name: masterToken\n      type: shell\n      params:\n        cmd: curl -X GET http://localhost:41184/auth/check?auth_token={{authRead}} | sed \"s/{.*\\\"token\\\":\\\"\\([^\\\"]*\\).*}/\\1/g\"\n        \n    - name: defaultNotebook\n      type: shell\n      params:\n        cmd: cat ~/.config/Joplin/.parentid \n        \n    - name: clipboardTodo\n      type: shell\n      params:\n        cmd: \"curl --silent --output /dev/null --data '{\\\"title\\\": \\\"Quick todo ‚òëÔ∏è\\\", \\\"body\\\": \\\" {{clipboard}} \\\", \\\"is_todo\\\": 1, \\\"parent_id\\\": \\\"{{defaultNotebook}}\\\" }' http://localhost:41184/notes?token={{masterToken}}\"\n\n\n################ WIP ###################\n# Prototype of package testing suite\n  - trigger: :api\n    replace: \"{{clienttokensave}}\"\n\n  - trigger: :sav\n    replace: \"{{api}}\"\n    \n\n# Prototype to allow user choice of his notebooks as default\n# Should return id of selected notebook\n## Status: cannot be implemented untill \n## \"choices\" extension would allow \n## injection of list with ids list\n\n  - trigger: :init\n    replace: \"{{notebook}}\"\n    vars:\n# should be rewritten to use CONFIG espanso folder\n# instead of joplin's: because this client\n# doesn't store joplin's auth token, only its own.\n      - name: authRead\n        type: shell\n        params:\n          cmd: cat ~/.config/Joplin/.auth\n# Requests a master token from Joplin and parses the output \n      - name: masterToken\n        type: shell\n        params:\n          cmd: curl -X GET http://localhost:41184/auth/check?auth_token={{authRead}} | sed \"s/{.*\\\"token\\\":\\\"\\([^\\\"]*\\).*}/\\1/g\"\n# Gets JSON of notebook titles and parses it to be a list\n      - name: notebooktitles\n        type: shell\n        params:\n          cmd: for ((i=1;i<=5;i++)); do curl -XGET \"http://localhost:41184/folders?page=$i&token={{masterToken}}\"; done | grep -o '\"title\":\"[^\"]*' | grep -o '[^\"]*$' | sed G\n# Gets JSON of notebook ids and parses it to be a list\n      - name: notebookid\n        type: shell\n        params:\n          cmd: for ((i=1;i<=5;i++)); do curl -XGET \"http://localhost:41184/folders?page=$i&token={{masterToken}}\"; done | grep -o '\"id\":\"[^\"]*' | grep -o '[^\"]*$' | sed G\n# Displays the choice of notebook to user\n      - name: notebook\n        type: choice\n        params:\n          values: \n            - label: |\n                \"{{notebooktitles}}\"\n              id: |\n                \"{{notebookid}}\"\n         \n"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h2: \"h2\",\n    ol: \"ol\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Joplin Shortcut (jops)\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Main features\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \":jop\"\n        }), \" initiate the plugin: authorization of the plugin + setting up default notebook via external link\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \":mn\"\n        }), \" make new note\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \":mt\"\n        }), \" make new todo\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \":ct\"\n        }), \" creating new todo from clipboard\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How to install\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Install espanso\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"in terminal run \", _jsx(_components.code, {\n          children: \"espanso install jops\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Enable Joplin's Web Clipper service\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://user-images.githubusercontent.com/44114323/204137550-1bb7aa5f-dac4-468d-9d7e-8e85eb964b86.mp4\",\n        children: \"https://user-images.githubusercontent.com/44114323/204137550-1bb7aa5f-dac4-468d-9d7e-8e85eb964b86.mp4\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"0\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Make sure Joplin and espanso are running\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Type\", _jsx(_components.code, {\n          children: \":jop\"\n        }), \" anywhere (not only in text fields) and press Grant authorization in Joplin. Optionally you can provide external link of the notebook of choice where your quick notes will land.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Type \", _jsx(_components.code, {\n          children: \":mn\"\n        }), \" to create the first quick note\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://user-images.githubusercontent.com/44114323/204137648-5d5135e4-3c25-44a9-a940-a58340e307ac.mp4\",\n        children: \"https://user-images.githubusercontent.com/44114323/204137648-5d5135e4-3c25-44a9-a940-a58340e307ac.mp4\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Other considerations\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It doesn't work if Joplin isn't running, hence you should start it beforehand\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"versions":["0.1.0"]},"__N_SSG":true}