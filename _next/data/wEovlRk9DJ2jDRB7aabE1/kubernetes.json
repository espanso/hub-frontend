{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"kubernetes-0.1.0","name":"kubernetes","author":"QJoly","description":"Kubernetes manifests","title":"kubernetes","version":"0.1.0","tags":["file","kubernetes","yaml"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/kubernetes-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/kubernetes-0.1.0-sha256.txt"},"manifest":{"author":"QJoly","description":"Kubernetes manifests","homepage":{"_tag":"Some","value":"https://github.com/QJoly/espanso-kubernetes"},"name":"kubernetes","title":"kubernetes","version":"0.1.0","tags":["file","kubernetes","yaml"]},"readme":"Espanso package containing kubernetes manifests.\n\nWhen you need to deploy stack and debug, you run several time the same command.\n\nWith these shortcuts command, earn time !\n\n### List of available command\n\n## Usage\n\n| Short             | Description                                              |\n| ----------------- | -------------------------------------------------------- |\n| :kubedeploy       | Deployment that create 3 replicas of nginx               |\n| :kubeservice      | Example of a service                                     |\n| :kubepvc          | Persistent volume claim on default storageclass          |\n| :kubepoddebug     | Simple ubuntu without app that run infinitly             |\n| :kubecronjob      | Cronjob Example                                          |\n| :kubeingressroute | IngressRoute for Traefik                                 |\n| :kubeingress      | Example of Ingress                                       |\n| :kubeconfigmap    | Example of ConfigMap                                     |\n| :kubesecret       | Create a secret                                          |\n\n","packageYml":[{"name":"package.yml","content":"# Docker compose Package\n\nmatches:\n  - trigger: \":kubedeploy\"\n    replace: |\n        apiVersion: apps/v1\n        kind: Deployment\n        metadata:\n          name: nginx-deployment\n          labels:\n            app: nginx\n        spec:\n          replicas: 3\n          selector:\n            matchLabels:\n              app: nginx\n          template:\n            metadata:\n              labels:\n                app: nginx\n            spec:\n              containers:\n              - name: nginx\n                image: nginx:1.14.2\n                ports:\n                - containerPort: 80\n\n  - trigger: \":kubeservice\"\n    replace: |\n        apiVersion: v1\n        kind: Service\n        metadata:\n          name: my-service\n        spec:\n          selector:\n            app.kubernetes.io/name: MyApp\n          ports:\n            - protocol: TCP\n              port: 80\n              targetPort: 9376\n\n  - trigger: \":kubepoddebug\"\n    replace: |\n        apiVersion: v1\n        kind: Pod\n        metadata:\n          name: ubuntu\n        spec:\n          containers:\n          - name: ubuntu\n            image: ubuntu:latest\n            # Just spin & wait forever\n            command: [ \"/bin/bash\", \"-c\", \"--\" ]\n            args: [ \"while true; do sleep 30; done;\" ]\n   \n  - trigger: \":kubecronjob\"\n    replace: |   \n        apiVersion: batch/v1\n        kind: CronJob\n        metadata:\n          name: hello\n        spec:\n          schedule: \"* * * * *\"\n          jobTemplate:\n            spec:\n              template:\n                spec:\n                  containers:\n                  - name: hello\n                    image: busybox:1.28\n                    imagePullPolicy: IfNotPresent\n                    command:\n                    - /bin/sh\n                    - -c\n                    - date; echo Hello from the Kubernetes cluster\n                  restartPolicy: OnFailure\n   \n  - trigger: \":kubepvc\"\n    replace: |   \n        apiVersion: v1\n        kind: PersistentVolumeClaim\n        metadata:\n          name: my-pvc\n        spec:\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 1Gi\n\n          \n  - trigger: \":kubeingressroute\"\n    replace: |         \n        apiVersion: traefik.containo.us/v1alpha1\n        kind: IngressRoute\n        metadata:\n          name: domain-name-tls\n        spec:\n          entryPoints:\n          - websecure\n          routes:\n          - match: Host(`domain-name`)\n            kind: Rule\n            services:\n            - name: nginx\n              port: 80\n          tls:\n            certResolver: letsencrypt\n\n  - trigger: \":kubeingress\"\n    replace: |\n        apiVersion: networking.k8s.io/v1\n        kind: Ingress\n        metadata:\n          name: minimal-ingress\n          annotations:\n            nginx.ingress.kubernetes.io/rewrite-target: /\n        spec:\n          ingressClassName: nginx-example\n          rules:\n          - http:\n              paths:\n              - path: /testpath\n                pathType: Prefix\n                backend:\n                  service:\n                    name: test\n                    port:\n                      number: 80  \n\n  - trigger: \":kubeconfigmap\"\n    replace: |\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: my-configmap\n        data:\n          key1: value1\n          key2: value2\n\n  - trigger: \":kubesecret\"\n    replace: |\n        apiVersion: v1\n        kind: Secret\n        metadata:\n          name: my-secret\n        type: Opaque\n        data:\n          key1: <base64-encoded-value1>\n          key2: <base64-encoded-value2>\n"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Espanso package containing kubernetes manifests.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When you need to deploy stack and debug, you run several time the same command.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With these shortcuts command, earn time !\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"List of available command\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Short\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubedeploy\"\n          }), _jsx(_components.td, {\n            children: \"Deployment that create 3 replicas of nginx\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubeservice\"\n          }), _jsx(_components.td, {\n            children: \"Example of a service\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubepvc\"\n          }), _jsx(_components.td, {\n            children: \"Persistent volume claim on default storageclass\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubepoddebug\"\n          }), _jsx(_components.td, {\n            children: \"Simple ubuntu without app that run infinitly\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubecronjob\"\n          }), _jsx(_components.td, {\n            children: \"Cronjob Example\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubeingressroute\"\n          }), _jsx(_components.td, {\n            children: \"IngressRoute for Traefik\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubeingress\"\n          }), _jsx(_components.td, {\n            children: \"Example of Ingress\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubeconfigmap\"\n          }), _jsx(_components.td, {\n            children: \"Example of ConfigMap\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \":kubesecret\"\n          }), _jsx(_components.td, {\n            children: \"Create a secret\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"versions":["0.1.0"]},"__N_SSG":true}