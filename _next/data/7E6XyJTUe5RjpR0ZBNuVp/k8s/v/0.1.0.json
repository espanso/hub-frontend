{"pageProps":{"packageRepo":{"package":{"id":"k8s-0.1.0","name":"k8s","author":"Thorsten Müller","description":"k8s shortcodes","title":"k8s","version":"0.1.0","tags":["k8s"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/k8s-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/k8s-0.1.0-sha256.txt"},"manifest":{"author":"Thorsten Müller","description":"k8s shortcodes","name":"k8s","title":"k8s","version":"0.1.0","tags":["k8s"],"homepage":{"_tag":"None"}},"readme":"A package for k8s shortcodes\n\n\n\n## Usage\n\n| Short     | Description                                              |\n| --------- | -------------------------------------------------------- |\n| bb8s      | get cleartext of base64 encoded strings                  |\n| k8sapli   | start an alpine pod                                      |\n| k8sgetall | get all resources in current namespace                   |\n| cc8s      | get all pods with containers listed in current namespace |\n| k8snp     | get all pods running on node                             |\n| k8smf     | -o json \\| jq 'del(.metadata.managedFields)'             |\n| k8scurl   | start a curl pod                                         |\n| k8sdrain  | drain node                                               |\n\n","packageYml":[{"name":"package.yml","content":"---\nmatches:\n  - trigger: \"bb8s\"\n    replace: \"-ogo-template='{{var}}'\"\n    vars:\n      - name: var\n        type: echo\n        inject_vars: false\n        params:\n          echo: \"{{ range $k, $val := .data}}{{$k}}={{ $val | base64decode }}{{\\\"\\\\n\\\"}}{{end}}\"\n\n  - trigger: \"k8salpi\"\n    replace: \"kubectl run -i --tty --rm debug --image=alpine --restart=Never -- sh\"\n\n  - trigger: \"k8sgetall\"\n    replace: \"kubectl api-resources --verbs=list --namespaced -o name  | xargs -n 1 kubectl get --show-kind --ignore-not-found\"\n\n  - trigger: \"cc8s\"\n    replace: \"-o=custom-columns=NameSpace:.metadata.namespace,NAME:.metadata.name,CONTAINERS:.spec.containers[*].name\"\n\n  - trigger: \"k8scurl\"\n    replace: |\n     cat <<EOF |kubectl apply -f -\n     apiVersion: v1\n     kind: Pod\n     metadata:\n       name: testcurl\n     spec:\n       containers:\n       - name: curl\n         image: curlimages/curl\n         command: [ \"sleep\", \"600\" ]\n     EOF\n     kubectl exec -it testcurl -- sh\n\n  - trigger: \"k8snp\"\n    replace: \"kubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=\"\n\n  - trigger: \"k8smf\"\n    replace: \"-o json | jq 'del(.metadata.managedFields)'\"\n\n  - trigger: \"k8sdrain\"\n    replace: \"kubectl drain --delete-emptydir-data --ignore-daemonsets\"\n"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    h2: \"h2\",\n    p: \"p\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"A package for k8s shortcodes\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Short\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"bb8s\"\n          }), _jsx(_components.td, {\n            children: \"get cleartext of base64 encoded strings\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"k8sapli\"\n          }), _jsx(_components.td, {\n            children: \"start an alpine pod\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"k8sgetall\"\n          }), _jsx(_components.td, {\n            children: \"get all resources in current namespace\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"cc8s\"\n          }), _jsx(_components.td, {\n            children: \"get all pods with containers listed in current namespace\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"k8snp\"\n          }), _jsx(_components.td, {\n            children: \"get all pods running on node\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"k8smf\"\n          }), _jsx(_components.td, {\n            children: \"-o json | jq 'del(.metadata.managedFields)'\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"k8scurl\"\n          }), _jsx(_components.td, {\n            children: \"start a curl pod\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"k8sdrain\"\n          }), _jsx(_components.td, {\n            children: \"drain node\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}