{"pageProps":{"packageRepo":{"package":{"id":"date-offset-0.1.0","name":"date-offset","author":"Stephen Meech","description":"A package that uses the date-handling facilities of different scripting languages to return dates variably offset from today, as specified in a regex trigger.","title":"Date Offsets","version":"0.1.0","tags":["time","date","python","bash","powershell","pwsh","javascript","node.js"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/date-offset-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/date-offset-0.1.0-sha256.txt"},"manifest":{"name":"date-offset","title":"Date Offsets","description":"A package that uses the date-handling facilities of different scripting languages to return dates variably offset from today, as specified in a regex trigger.","homepage":{"_tag":"Some","value":"https://github.com/smeech"},"version":"0.1.0","author":"Stephen Meech","tags":["time","date","python","bash","powershell","pwsh","javascript","node.js"]},"readme":"# Date Offsets\n\nEspanso's inbuilt `date` extension is handy, but very limited, particularly because it **cannot** accept a `{{variable}}` for its `offset:` value. \n\nThis package contains short Espanso snippets to return dates offset from today, utilising the date-handling facilities of four different scripting languages, partly as an exercise for me in working out how this can be done.\n\nAs supplied, typing a trigger, e.g.:\n```\n-18d, +2w, -3m, +5y\n```\nwill present you with a choice box, listing the different scripts, each of which will return the relevant (hopefully the same!) date.\n\nAny of the languages you don't have installed will generate Espanso errors:\n  - Bash (Linux/macOS) or WSL (Windows)\n  - Powershell (Windows) or pwsh (Linux/macOS)\n  - Python\n  - Javascript\n\nMy tests (Linux) indicate that in speed, Bash > Python > Node > PowerShell, but PowerShell is likely to be faster (but not necessarily the *fastest*) in Windows.\n\nUltimately, adopt one and delete or comment-out the others you don't need.\n\nSee my package `timezone-date` for timezone offsets.\n\nStephen Meech\n(@smeech)\n","packageYml":[{"name":"package.yml","content":"# yaml-language-server: $schema=https://raw.githubusercontent.com/espanso/espanso/dev/schemas/match.schema.json\r\n\r\n\r\n# Espanso snippets to return offset date from today\r\n# Type e.g.: -18d, +2w, -3m, +5y etc.\r\n\r\nmatches:\r\n# Bash version\r\n  - regex: (?P<offset>[+-]\\d+)(?P<unit>[dwmy])\r\n    replace: \"{{output}}\"\r\n    label: Bash offset date\r\n    vars:\r\n      - name: output\r\n        type: shell\r\n        params:\r\n          shell: bash\r\n          cmd: |           \r\n            case {{unit}} in\r\n                d) date=$(date -d \"{{offset}} days\" +\"%d/%m/%y\") ;;\r\n                w) date=$(date -d \"{{offset}} weeks\" +\"%d/%m/%y\") ;;\r\n                m) date=$(date -d \"{{offset}} months\" +\"%d/%m/%y\") ;;\r\n                y) date=$(date -d \"{{offset}} years\" +\"%d/%m/%y\") ;;\r\n            esac\r\n            echo \"$date\"\r\n\r\n# PowerShell version\r\n  - regex: (?P<offset>[+-]\\d+)(?P<unit>[dwmy])\r\n    replace: \"{{output}}\"\r\n    label: PowerShell offset date\r\n    vars:\r\n      - name: output\r\n        type: shell\r\n        params:\r\n          shell: pwsh\r\n          cmd: |\r\n            switch (\"{{unit}}\") {\r\n                \"d\" { $date = (Get-Date).AddDays({{offset}}).ToString(\"dd/MM/yy\") }\r\n                \"w\" { $date = (Get-Date).AddDays({{offset}} * 7).ToString(\"dd/MM/yy\") }\r\n                \"m\" { $date = (Get-Date).AddMonths({{offset}}).ToString(\"dd/MM/yy\") }\r\n                \"y\" { $date = (Get-Date).AddYears({{offset}}).ToString(\"dd/MM/yy\") }\r\n            }\r\n            Write-Output $date\r\n\r\n# Python version\r\n  - regex: (?P<offset>[+-]\\d+)(?P<unit>[dwmy])\r\n    replace: \"{{output}}\"\r\n    label: Python offset date\r\n    vars:\r\n      - name: output\r\n        type: script\r\n        params:\r\n          args:\r\n            - python\r\n            - -c\r\n            - |\r\n              from datetime import datetime, timedelta\r\n              from dateutil.relativedelta import relativedelta\r\n              now = datetime.now()\r\n              match \"{{unit}}\":\r\n                  case \"d\": date = now + timedelta(days={{offset}})\r\n                  case \"w\": date = now + timedelta(weeks={{offset}})\r\n                  case \"m\": date = now + relativedelta(months={{offset}})\r\n                  case \"y\": date = now + relativedelta(years={{offset}})\r\n              print(date.strftime(\"%d/%m/%y\"))\r\n\r\n# Javascript version\r\n  - regex: (?P<offset>[+-]\\d+)(?P<unit>[dwmy])\r\n    replace: \"{{output}}\"\r\n    label: Javascript offset date\r\n    vars:\r\n      - name: output\r\n        type: script\r\n        params:\r\n          args:\r\n            - node\r\n            - -e\r\n            - |\r\n              let now = new Date();           \r\n              switch('{{unit}}') {\r\n                case 'd': date = new Date(now.setDate(now.getDate() + {{offset}})); break;\r\n                case 'w': date = new Date(now.setDate(now.getDate() + ({{offset}} * 7))); break;\r\n                case 'm': date = new Date(now.setMonth(now.getMonth() + {{offset}})); break;\r\n                case 'y': date = new Date(now.setFullYear(now.getFullYear() + {{offset}})); break;\r\n              }\r\n              const day = (\"0\" + date.getDate()).slice(-2);\r\n              const month = (\"0\" + (date.getMonth() + 1)).slice(-2);\r\n              const year = date.getFullYear().toString().slice(-2);\r\n              console.log(`${day}/${month}/${year}`);"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Date Offsets\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Espanso's inbuilt \", _jsx(_components.code, {\n        children: \"date\"\n      }), \" extension is handy, but very limited, particularly because it \", _jsx(_components.strong, {\n        children: \"cannot\"\n      }), \" accept a \", _jsx(_components.code, {\n        children: \"{{variable}}\"\n      }), \" for its \", _jsx(_components.code, {\n        children: \"offset:\"\n      }), \" value.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This package contains short Espanso snippets to return dates offset from today, utilising the date-handling facilities of four different scripting languages, partly as an exercise for me in working out how this can be done.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As supplied, typing a trigger, e.g.:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"-18d, +2w, -3m, +5y\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"will present you with a choice box, listing the different scripts, each of which will return the relevant (hopefully the same!) date.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Any of the languages you don't have installed will generate Espanso errors:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Bash (Linux/macOS) or WSL (Windows)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Powershell (Windows) or pwsh (Linux/macOS)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Python\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Javascript\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"My tests (Linux) indicate that in speed, Bash > Python > Node > PowerShell, but PowerShell is likely to be faster (but not necessarily the \", _jsx(_components.em, {\n        children: \"fastest\"\n      }), \") in Windows.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ultimately, adopt one and delete or comment-out the others you don't need.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See my package \", _jsx(_components.code, {\n        children: \"timezone-date\"\n      }), \" for timezone offsets.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Stephen Meech\\n(@smeech)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}