{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"python-utils-0.1.0","name":"python-utils","author":"Kang Chen","description":"A python code snippet package for Espanso to reduce boilerplate code","title":"Python Utilities","version":"0.1.0","tags":["python","development"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/python-utils-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/python-utils-0.1.0-sha256.txt"},"manifest":{"name":"python-utils","title":"Python Utilities","description":"A python code snippet package for Espanso to reduce boilerplate code","version":"0.1.0","author":"Kang Chen","homepage":{"_tag":"Some","value":"https://github.com/kchenTTP/espanso-python-utils"},"tags":["python","development"]},"readme":"# Espanso Python Utils\n\nA python code snippet package for [Espanso](https://espanso.org/) to reduce boilerplate code.\n\n\n## Triggers\n\n| Trigger        | Command                                                                                                                                                                                                                                                                                         |\n| -------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| :pymain        | <pre>def main() -> None:<br><br>if \\_\\_name__ == \"\\_\\_main__\":<br>    main()</pre>                                                                                                                                                                                                              |\n| :pycls         | <pre>class :<br>    def \\_\\_init__(self) -> None:<br><br><br>    def method_1(self) -> None:<br></pre>                                                                                                                                                                                          |\n| :pydef         | <pre>def ():<br><br>    return</pre>                                                                                                                                                                                                                                                            |\n| :pymatch       | <pre>match :<br>    case :<br><br>    case _:<br></pre>                                                                                                                                                                                                                                         |\n| :pytry         | <pre>try:<br><br>except  as e:<br></pre>                                                                                                                                                                                                                                                        |\n| :pyboiler:args | <pre>import argparse<br><br>def main(args: argparse.Namespace) -> None:<br><br>if \\_\\_name__ == \"\\_\\_main__\":<br>    parser = argparse.ArgumentParser()<br><br>    parser.add_argument(\"\")<br><br>    args = parser.parse_args()<br>    main(args)</pre>                                        |\n| :pyboiler:log  | <pre>import logging<br><br>logger = logging.getLogger(__name__)<br><br>def main() -> None:<br>    logger.debug(\"Logger working\")<br><br>if \\_\\_name__ == \"\\_\\_main__\":<br>    logging.basicConfig(level=logging.DEBUG, format=\"%(levelname)s %(asctime)s: %(message)s\")<br><br>    main()</pre> |\n","packageYml":[{"name":"package.yml","content":"matches:\n  - trigger: \":pymain\"\n    replace: |\n              def main() -> None:\n                  $|$\n              \n              if __name__ == \"__main__\":\n                  main()\n  - trigger: \":pycls\"\n    replace: |\n              class $|$:\n                  def __init__(self) -> None:\n                      \n\n                  def method_1(self) -> None:\n                      \n  - trigger: \":pydef\"\n    replace: |\n              def $|$():\n                  \n                  return\n  - trigger: \":pymatch\"\n    replace: |\n              match $|$:\n                  case :\n                      \n                  case _:\n                      \n  - trigger: \":pytry\"\n    replace: |\n              try:\n                  \n              except $|$ as e:\n                  \n  - trigger: \":pyboiler:args\"\n    replace: |\n              import argparse\n              \n              def main(args: argparse.Namespace) -> None:\n                  \n              if __name__ == \"__main__\":\n                  parser = argparse.ArgumentParser()\n                  \n                  parser.add_argument(\"$|$\")\n                  \n                  args = parser.parse_args()\n                  main(args)\n  - trigger: \":pyboiler:log\"\n    replace: |\n              import logging\n\n              logger = logging.getLogger(__name__)\n              \n              def main() -> None:\n                  logger.debug(\"Logger working\")\n\n              if __name__ == \"__main__\":\n                  logging.basicConfig(level=logging.DEBUG, format=\"%(levelname)s %(asctime)s: %(message)s\")\n                  \n                  main()"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"var b=Object.defineProperty,s=Object.defineProperties;var i=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable;var o=(t,e,a)=>e in t?b(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a,r=(t,e)=>{for(var a in e||(e={}))l.call(e,a)&&o(t,a,e[a]);if(p)for(var a of p(e))g.call(e,a)&&o(t,a,e[a]);return t},m=(t,e)=>s(t,i(e));var d=(t,e)=>{var a={};for(var n in t)l.call(t,n)&&e.indexOf(n)<0&&(a[n]=t[n]);if(t!=null&&p)for(var n of p(t))e.indexOf(n)<0&&g.call(t,n)&&(a[n]=t[n]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var n=a,{components:t}=n,e=d(n,[\"components\"]);return mdx(MDXLayout,m(r(r({},layoutProps),e),{components:t,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Espanso Python Utils\"),mdx(\"p\",null,\"A python code snippet package for \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://espanso.org/\"}),\"Espanso\"),\" to reduce boilerplate code.\"),mdx(\"h2\",null,\"Triggers\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",r({parentName:\"tr\"},{align:null}),\"Trigger\"),mdx(\"th\",r({parentName:\"tr\"},{align:null}),\"Command\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",r({parentName:\"tr\"},{align:null}),\":pymain\"),mdx(\"td\",r({parentName:\"tr\"},{align:null}),mdx(\"pre\",null,\"def main() -> None:\",mdx(\"br\",null),mdx(\"br\",null),\"if \",\"_\",\"_\",\"name\",mdx(\"strong\",{parentName:\"td\"},' == \"',\"_\",\"_\",\"main\"),'\":',mdx(\"br\",null),\"    main()\"))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",r({parentName:\"tr\"},{align:null}),\":pycls\"),mdx(\"td\",r({parentName:\"tr\"},{align:null}),mdx(\"pre\",null,\"class :\",mdx(\"br\",null),\"    def \",\"_\",\"_\",\"init__(self) -> None:\",mdx(\"br\",null),mdx(\"br\",null),mdx(\"br\",null),\"    def method_1(self) -> None:\",mdx(\"br\",null)))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",r({parentName:\"tr\"},{align:null}),\":pydef\"),mdx(\"td\",r({parentName:\"tr\"},{align:null}),mdx(\"pre\",null,\"def ():\",mdx(\"br\",null),mdx(\"br\",null),\"    return\"))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",r({parentName:\"tr\"},{align:null}),\":pymatch\"),mdx(\"td\",r({parentName:\"tr\"},{align:null}),mdx(\"pre\",null,\"match :\",mdx(\"br\",null),\"    case :\",mdx(\"br\",null),mdx(\"br\",null),\"    case _:\",mdx(\"br\",null)))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",r({parentName:\"tr\"},{align:null}),\":pytry\"),mdx(\"td\",r({parentName:\"tr\"},{align:null}),mdx(\"pre\",null,\"try:\",mdx(\"br\",null),mdx(\"br\",null),\"except  as e:\",mdx(\"br\",null)))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",r({parentName:\"tr\"},{align:null}),\":pyboiler:args\"),mdx(\"td\",r({parentName:\"tr\"},{align:null}),mdx(\"pre\",null,\"import argparse\",mdx(\"br\",null),mdx(\"br\",null),\"def main(args: argparse.Namespace) -> None:\",mdx(\"br\",null),mdx(\"br\",null),\"if \",\"_\",\"_\",\"name\",mdx(\"strong\",{parentName:\"td\"},' == \"',\"_\",\"_\",\"main\"),'\":',mdx(\"br\",null),\"    parser = argparse.ArgumentParser()\",mdx(\"br\",null),mdx(\"br\",null),'    parser.add_argument(\"\")',mdx(\"br\",null),mdx(\"br\",null),\"    args = parser.parse_args()\",mdx(\"br\",null),\"    main(args)\"))),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",r({parentName:\"tr\"},{align:null}),\":pyboiler:log\"),mdx(\"td\",r({parentName:\"tr\"},{align:null}),mdx(\"pre\",null,\"import logging\",mdx(\"br\",null),mdx(\"br\",null),\"logger = logging.getLogger(\",mdx(\"strong\",{parentName:\"td\"},\"name\"),\")\",mdx(\"br\",null),mdx(\"br\",null),\"def main() -> None:\",mdx(\"br\",null),'    logger.debug(\"Logger working\")',mdx(\"br\",null),mdx(\"br\",null),\"if \",\"_\",\"_\",\"name\",mdx(\"strong\",{parentName:\"td\"},' == \"',\"_\",\"_\",\"main\"),'\":',mdx(\"br\",null),'    logging.basicConfig(level=logging.DEBUG, format=\"%(levelname)s %(asctime)s: %(message)s\")',mdx(\"br\",null),mdx(\"br\",null),\"    main()\"))))))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"versions":["0.1.0"]},"__N_SSG":true}