{"pageProps":{"packageRepo":{"package":{"id":"form-list-0.2.0","name":"form-list","author":"Ben Alexander (mistahBen), updated by Stephen Meech (smeech)","description":"Uses a CSV to present a list of links and then pastes the chosen URL.","title":"Form URLs List","version":"0.2.0","tags":["utility","internet","URL","CSV","forms"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/form-list-0.2.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/form-list-0.2.0-sha256.txt"},"manifest":{"name":"form-list","title":"Form URLs List","description":"Uses a CSV to present a list of links and then pastes the chosen URL.","version":"0.2.0","author":"Ben Alexander (mistahBen), updated by Stephen Meech (smeech)","tags":["utility","internet","URL","CSV","forms"],"homepage":{"_tag":"Some","value":"https://github.com/smeech"}},"readme":"# Form list\n## A package for getting a list of expansions from one form via a CSV list.\n\n# Setup\nThe `package.yml` does not need to be edited.\n\nYou will need to edit the entries in the `form_urls.csv`. The sample lines are a good starting point. The basic syntax is:\n\n| Name/description (without quotes) | URL |\n| --- | --- |\n| gmail | https://gmail.com/ |\n\n**Separate the two fields with a comma.** Remember to save the file! Ensure you retain its UTF-8 encoding - spreadsheet programs may switch to UTF-8-BOM.\n\n## Reuse\n\nYou can of course also copy the contents of this package and create multiple form lists with other text. üëç If you do so, you will need to edit the global variable for the location of the csv file.\n\nRequires Python, but if present should work in all operating systems.","packageYml":[{"name":"package.yml","content":"# yaml-language-server: $schema=https://raw.githubusercontent.com/espanso/espanso/dev/schemas/match.schema.json\n\nglobal_vars:\n  # OS-agnostic derivation of path to CSV file.\n  - name: urlcsv\n    type: script\n    params:\n      args:\n        - python\n        - -c\n        - |\n          import os\n          config_path = os.getenv(\"CONFIG\")\n          print(os.path.join(config_path, \"match\", \"packages\", \"form-list\", \"0.2.0\", \"form_urls.csv\"))\n      \nmatches:\n  - trigger: :forms\n    replace: '{{form_url}}'\n    vars:\n      # Read choice-list options from CSV file.\n      - name: form_names\n        type: script\n        params:\n          args:\n            - python\n            - -c\n            - |\n              import csv\n              with open(r'{{urlcsv}}', newline='') as f:\n                for row in csv.reader(f): print(row[0])\n      # Form\n      - name: choice\n        type: form\n        params:\n          layout: |\n            Get link for:\n            [[choices]]\n          fields:\n            choices:\n              type: list\n              values: '{{form_names}}'\n      # Return paired item as selected above\n      - name: form_url\n        type: script\n        params:\n          args:\n            - python\n            - -c\n            - |\n              import csv\n              with open(r'{{urlcsv}}', newline='') as f:\n                for row in csv.reader(f):\n                  if row[0] == '{{choice.choices}}':\n                    print(row[1]) ; break\n"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Form list\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"A package for getting a list of expansions from one form via a CSV list.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Setup\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"package.yml\"\n      }), \" does not need to be edited.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You will need to edit the entries in the \", _jsx(_components.code, {\n        children: \"form_urls.csv\"\n      }), \". The sample lines are a good starting point. The basic syntax is:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Name/description (without quotes)\"\n          }), _jsx(_components.th, {\n            children: \"URL\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"gmail\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://gmail.com/\",\n              children: \"https://gmail.com/\"\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Separate the two fields with a comma.\"\n      }), \" Remember to save the file! Ensure you retain its UTF-8 encoding - spreadsheet programs may switch to UTF-8-BOM.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Reuse\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can of course also copy the contents of this package and create multiple form lists with other text. üëç If you do so, you will need to edit the global variable for the location of the csv file.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Requires Python, but if present should work in all operating systems.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.2.1","0.2.0"]},"__N_SSG":true}