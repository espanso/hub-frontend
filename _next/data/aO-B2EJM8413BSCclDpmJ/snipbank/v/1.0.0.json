{"pageProps":{"packageRepo":{"package":{"id":"snipbank-1.0.0","name":"snipbank","author":"Dickson Law","description":"Easily configure custom snippets without manually editing the Espanso configs directory.","title":"SnipBank","version":"1.0.0","tags":["clipboard","utility"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/snipbank-1.0.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/snipbank-1.0.0-sha256.txt"},"manifest":{"author":"Dickson Law","description":"Easily configure custom snippets without manually editing the Espanso configs directory.","name":"snipbank","title":"SnipBank","version":"1.0.0","homepage":{"_tag":"Some","value":"https://github.com/dicksonlaw583/espanso-snipbank"},"tags":["clipboard","utility"]},"readme":"# SnipBank\n\nEasily collect snippets and recall them later with Espanso.\n\n## Requirements\n\n- Espanso 2.x or higher\n- Python 3.x or higher with Pip\n- PyYAML 5.x or higher\n\n## Installation\n\n```bash\npip install pyyaml\nespanso install snipbank\n```\n\n## Keyboard Shortcuts\n\n- Use `,,..` (two commas, two dots) to add a snippet.\n- Use `..,,` (two dots, two commas) to remove a snippet.\n\n## Pressing Tab and Enter in a Snippet\n\n- Use `^TAB^` in a snippet for pressing the Tab key.\n- Use `^ENTER^` in a snippet for pressing the Enter key.\n- Use `$|$` in a snippet to bring the cursor there upon inserting it.\n\n## Specifying a Form\n\nYou may optionally specify a popup form to go with a snippet in order to make\nparts of the snippet editable before its insertion.\n\n- Under \"Form\", enter the text to show in the popup. Use these to indicate fields:\n    - Text field: `[[variable_name]]`\n    - Text area: `[![variable_name]!]`\n    - Dropdown: `[^[variable_name:opt1|opt2|...]^]`\n    - List: `[>[variable_name:opt1|opt2|...]<]`\n- You may specify a default value after a field name using `=`. Example:\n`[[name=Anonymous]]`, `[^[greeting=Hello:Hello|Goodbye]^]`\n- Use `{{variable_name}}` in the snippet to reference a form field.\n\n## Rich Text Snippets\n\nYou may use Markdown or HTML to include rich text in your snippets.\n\n- `replace`: (Default) Use plain text replacements.\n- `markdown`: Markdown can be used in snippets.\n- `html`: HTML can be used in snippets.\n\nNotice that if you choose `markdown` or `html` and your snippet contains form input, the values from your form will also be interpreted as Markdown or HTML respectively.\n\n## Paste/Silent Mode\n\nWhen using `paste` mode (default), the snippet's replacement is printed. This\nallows you to use `,,..` to add a new trigger and type at the same time, or \n`..,,` as the \"paste\" step of a disposable clipboard. **If a form is specified, \nnothing is printed as the output relies on user input.**\n\nWhen using `silent` mode, nothing is printed. This is useful when you just want\nto manage your snippets without writing them out.\n","packageYml":[{"name":"package.yml","content":"global_vars:\n  - name: snipbank_python\n    type: echo\n    params:\n      echo: \"python\" # Replace this with the path to your Python instance if automatic detection is failing\n\nmatches:\n  - trigger: \",,..\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"last_choice\"\n        type: script\n        params:\n          args:\n            - \"{{snipbank_python}}\"\n            - \"%CONFIG%/match/packages/snipbank/lastused.py\"\n            - get\n            - mode\n            - paste\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"SnipBank: Add Trigger\\n\\nTrigger:[[trigger]]\\nSnippet:[[snippet]]\\nType:[[replacetype]]\\nMode:[[mode]]\\nForm:[[form]]\"\n          fields:\n            snippet:\n              multiline: true\n            form:\n              multiline: true\n            mode:\n              type: choice\n              default: \"{{last_choice}}\"\n              values:\n                - paste\n                - silent\n            replacetype:\n              type: choice\n              default: replace\n              values:\n                - replace\n                - markdown\n                - html\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{snipbank_python}}\"\n            - \"%CONFIG%/match/packages/snipbank/addtrigger.py\"\n            - \"{{f.trigger}}\"\n            - \"{{f.snippet}}\"\n            - \"{{f.form}}\"\n            - \"{{f.replacetype}}\"\n            - \"{{f.mode}}\"\n      - name: set_last_choice\n        type: script\n        params:\n          args:\n            - \"{{snipbank_python}}\"\n            - \"%CONFIG%/match/packages/snipbank/lastused.py\"\n            - set\n            - mode\n            - \"{{f.mode}}\"\n  - trigger: \"..,,\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: list_triggers\n        type: script\n        params:\n          trim: true\n          args:\n            - \"{{snipbank_python}}\"\n            - \"%CONFIG%/match/packages/snipbank/listtriggers.py\"\n      - name: \"last_choice\"\n        type: script\n        params:\n          args:\n            - \"{{snipbank_python}}\"\n            - \"%CONFIG%/match/packages/snipbank/lastused.py\"\n            - get\n            - mode\n            - paste\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"SnipBank: Remove Trigger\\n\\nTrigger:\\n[[trigger]]\\nMode:\\n[[mode]]\"\n          fields:\n            trigger:\n              type: list\n              values: \"{{list_triggers}}\"\n            mode:\n              type: choice\n              default: \"{{last_choice}}\"\n              values:\n                - paste\n                - silent\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{snipbank_python}}\"\n            - \"%CONFIG%/match/packages/snipbank/removetrigger.py\"\n            - \"{{f.trigger}}\"\n            - \"{{f.mode}}\"\n      - name: set_last_choice\n        type: script\n        params:\n          args:\n            - \"{{snipbank_python}}\"\n            - \"%CONFIG%/match/packages/snipbank/lastused.py\"\n            - set\n            - mode\n            - \"{{f.mode}}\"\n"}],"license":{"_tag":"Some","value":"MIT License\n\nCopyright (c) 2025 Dickson Law\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"SnipBank\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Easily collect snippets and recall them later with Espanso.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Requirements\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Espanso 2.x or higher\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Python 3.x or higher with Pip\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PyYAML 5.x or higher\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"pip install pyyaml\\nespanso install snipbank\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Keyboard Shortcuts\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \",,..\"\n        }), \" (two commas, two dots) to add a snippet.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"..,,\"\n        }), \" (two dots, two commas) to remove a snippet.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Pressing Tab and Enter in a Snippet\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"^TAB^\"\n        }), \" in a snippet for pressing the Tab key.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"^ENTER^\"\n        }), \" in a snippet for pressing the Enter key.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"$|$\"\n        }), \" in a snippet to bring the cursor there upon inserting it.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Specifying a Form\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You may optionally specify a popup form to go with a snippet in order to make\\nparts of the snippet editable before its insertion.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Under \\\"Form\\\", enter the text to show in the popup. Use these to indicate fields:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Text field: \", _jsx(_components.code, {\n              children: \"[[variable_name]]\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Text area: \", _jsx(_components.code, {\n              children: \"[![variable_name]!]\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Dropdown: \", _jsx(_components.code, {\n              children: \"[^[variable_name:opt1|opt2|...]^]\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"List: \", _jsx(_components.code, {\n              children: \"[>[variable_name:opt1|opt2|...]<]\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"You may specify a default value after a field name using \", _jsx(_components.code, {\n          children: \"=\"\n        }), \". Example:\\n\", _jsx(_components.code, {\n          children: \"[[name=Anonymous]]\"\n        }), \", \", _jsx(_components.code, {\n          children: \"[^[greeting=Hello:Hello|Goodbye]^]\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"{{variable_name}}\"\n        }), \" in the snippet to reference a form field.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Rich Text Snippets\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You may use Markdown or HTML to include rich text in your snippets.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"replace\"\n        }), \": (Default) Use plain text replacements.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"markdown\"\n        }), \": Markdown can be used in snippets.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"html\"\n        }), \": HTML can be used in snippets.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Notice that if you choose \", _jsx(_components.code, {\n        children: \"markdown\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"html\"\n      }), \" and your snippet contains form input, the values from your form will also be interpreted as Markdown or HTML respectively.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Paste/Silent Mode\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using \", _jsx(_components.code, {\n        children: \"paste\"\n      }), \" mode (default), the snippet's replacement is printed. This\\nallows you to use \", _jsx(_components.code, {\n        children: \",,..\"\n      }), \" to add a new trigger and type at the same time, or\\n\", _jsx(_components.code, {\n        children: \"..,,\"\n      }), \" as the \\\"paste\\\" step of a disposable clipboard. \", _jsx(_components.strong, {\n        children: \"If a form is specified,\\nnothing is printed as the output relies on user input.\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using \", _jsx(_components.code, {\n        children: \"silent\"\n      }), \" mode, nothing is printed. This is useful when you just want\\nto manage your snippets without writing them out.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["1.0.0"]},"__N_SSG":true}