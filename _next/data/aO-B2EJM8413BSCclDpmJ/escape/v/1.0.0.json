{"pageProps":{"packageRepo":{"package":{"id":"escape-1.0.0","name":"escape","author":"Dickson Law","description":"Common character escapes (backslashing, JSON, XML, URL-encoding, regex)","title":"Escape Text","version":"1.0.0","tags":["json","xml","backslash","url encoding","x-www-form-urlencoded","escape"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/escape-1.0.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/escape-1.0.0-sha256.txt"},"manifest":{"author":"Dickson Law","description":"Common character escapes (backslashing, JSON, XML, URL-encoding, regex)","title":"Escape Text","name":"escape","homepage":{"_tag":"Some","value":"https://github.com/dicksonlaw583/espanso-escape"},"version":"1.0.0","tags":["json","xml","backslash","url encoding","x-www-form-urlencoded","escape"]},"readme":"# Escape Text\n\nA simple Espanso package for encoding and decoding various common escape formats in programming (JSON, XML, URL-encoding, regular expressions)\n\n## Requirements\n\n- Python 3.x\n- Espanso 2.x or higher\n\n## Installation\n\n```\nespanso install escape\n```\n\n## Usage\n\n### Encoding\n\nAll encoding triggers start with `>>`\n\n|  Trigger  | Conversion |\n|-----------|---------|\n| `>>json` | Text -> JSON/backslash |\n| `>>xml` | Text -> XML |\n| `>>url` | Text -> URL encoding |\n| `>>regex` | Text -> Regular expression literal |\n\n### Decoding\n\nAll decoding triggers start with `<<`\n\n|  Trigger  | Conversion |\n|-----------|---------|\n| `<<json` | JSON/backslash -> Text |\n| `<<xml` | XML -> Text |\n| `<<url` | URL encoding -> Text |\n","packageYml":[{"name":"package.yml","content":"global_vars:\n  - name: escape_python\n    type: echo\n    params:\n      echo: \"python\" # Replace this with the path to your Python instance if automatic detection is failing\n\nmatches:\n  - triggers: [\">>json\", \">>\\\\\"]\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"JSON/backslash escape\\n\\nText:\\n[[text]]\"\n          fields:\n            text:\n              multiline: true\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{escape_python}}\"\n            - \"%CONFIG%/match/packages/escape/jsonescape.py\"\n            - \"{{f.text}}\"\n  - triggers: [\"<<json\", \"<<\\\\\"]\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"JSON/backslash un-escape\\n\\nText:\\n[[text]]\"\n          fields:\n            text:\n              multiline: true\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{escape_python}}\"\n            - \"%CONFIG%/match/packages/escape/jsonunescape.py\"\n            - \"{{f.text}}\"\n  - trigger: \">>xml\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"XML escape\\n\\nText:\\n[[text]]\"\n          fields:\n            text:\n              multiline: true\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{escape_python}}\"\n            - \"%CONFIG%/match/packages/escape/xmlescape.py\"\n            - \"{{f.text}}\"\n  - trigger: \"<<xml\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"XML un-escape\\n\\nText:\\n[[text]]\"\n          fields:\n            text:\n              multiline: true\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{escape_python}}\"\n            - \"%CONFIG%/match/packages/escape/xmlunescape.py\"\n            - \"{{f.text}}\"\n  - trigger: \">>url\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"URL encode\\n\\nText:\\n[[text]]\"\n          fields:\n            text:\n              multiline: true\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{escape_python}}\"\n            - \"%CONFIG%/match/packages/escape/urlescape.py\"\n            - \"{{f.text}}\"\n  - trigger: \"<<url\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"URL decode\\n\\nText:\\n[[text]]\"\n          fields:\n            text:\n              multiline: true\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{escape_python}}\"\n            - \"%CONFIG%/match/packages/escape/urlunescape.py\"\n            - \"{{f.text}}\"\n  - trigger: \">>regex\"\n    replace: \"{{stdout}}\"\n    vars:\n      - name: \"f\"\n        type: form\n        params:\n          layout: \"Regex escape\\n\\nText:\\n[[text]]\"\n          fields:\n            text:\n              multiline: true\n      - name: stdout\n        type: script\n        params:\n          trim: false\n          args:\n            - \"{{escape_python}}\"\n            - \"%CONFIG%/match/packages/escape/regexescape.py\"\n            - \"{{f.text}}\""}],"license":{"_tag":"Some","value":"MIT License\n\nCopyright (c) 2025 Dickson Law\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Escape Text\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A simple Espanso package for encoding and decoding various common escape formats in programming (JSON, XML, URL-encoding, regular expressions)\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Requirements\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Python 3.x\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Espanso 2.x or higher\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"espanso install escape\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Encoding\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All encoding triggers start with \", _jsx(_components.code, {\n        children: \">>\"\n      })]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Trigger\"\n          }), _jsx(_components.th, {\n            children: \"Conversion\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \">>json\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Text -> JSON/backslash\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \">>xml\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Text -> XML\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \">>url\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Text -> URL encoding\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \">>regex\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Text -> Regular expression literal\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Decoding\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All decoding triggers start with \", _jsx(_components.code, {\n        children: \"<<\"\n      })]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Trigger\"\n          }), _jsx(_components.th, {\n            children: \"Conversion\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"<<json\"\n            })\n          }), _jsx(_components.td, {\n            children: \"JSON/backslash -> Text\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"<<xml\"\n            })\n          }), _jsx(_components.td, {\n            children: \"XML -> Text\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"<<url\"\n            })\n          }), _jsx(_components.td, {\n            children: \"URL encoding -> Text\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["1.0.0"]},"__N_SSG":true}