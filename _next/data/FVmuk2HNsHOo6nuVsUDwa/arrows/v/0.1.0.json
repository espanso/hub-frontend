{"pageProps":{"packageRepo":{"package":{"id":"arrows-0.1.0","name":"arrows","author":"Jordan Matelsky","description":"Useful arrows and dashes","title":"Arrows","version":"0.1.0","tags":["symbols","arrows"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/arrows-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/arrows-0.1.0-sha256.txt"},"manifest":{"author":"Jordan Matelsky","description":"Useful arrows and dashes","name":"arrows","title":"Arrows","version":"0.1.0","homepage":{"_tag":"Some","value":"https://github.com/j6k4m8/espanso-arrows"},"tags":["symbols","arrows"]},"readme":"A simple package to add arrows and dashes\n\n\n| Symbol | Shortcut |\n|--------|----------|\n| —     | `\\--`, `\\mdash`, or `\\emdash`    |\n| –     | `\\ndash` or `\\endash`    |\n| <200b> (zero-width space)    | `\\zwsp`  |\n| •     | `\\bul`   |\n| ✓    | `\\check` |\n| §     | `\\\\sect` (Two slashes to avoid collision with LaTeX)    |\n| →     | `\\rarrow`    |\n| ←     | `\\larrow`    |\n| ↑     | `\\uarrow`    |\n| ↓     | `\\darrow`    |\n| ⟷     | `\\lrarrow`   |","packageYml":[{"name":"package.yml","content":"matches:\n  - trigger: \"\\\\--\"\n    replace: \"—\"\n  - trigger: \"\\\\mdash\"\n    replace: \"—\"\n  - trigger: \"\\\\emdash\"\n    replace: \"—\"\n  - trigger: \"\\\\ndash\"\n    replace: \"–\"\n  - trigger: \"\\\\endash\"\n    replace: \"–\"\n  - trigger: \"\\\\zwsp\"\n    replace: \"<200b>\"\n  - trigger: \"\\\\bul\"\n    replace: \"•\"\n  - trigger: \"\\\\check\"\n    replace: \"✓\"\n  - trigger: \"\\\\\\\\sect\"\n    replace: \"§\"\n  - trigger: \"\\\\rarrow\"\n    replace: \"→\"\n  - trigger: \"\\\\larrow\"\n    replace: \"←\"\n  - trigger: \"\\\\uarrow\"\n    replace: \"↑\"\n  - trigger: \"\\\\darrow\"\n    replace: \"↓\"\n  - trigger: \"\\\\lrarrow\"\n    replace: \"⟷\""}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"A simple package to add arrows and dashes\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Symbol\"\n          }), _jsx(_components.th, {\n            children: \"Shortcut\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"—\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"\\\\--\"\n            }), \", \", _jsx(_components.code, {\n              children: \"\\\\mdash\"\n            }), \", or \", _jsx(_components.code, {\n              children: \"\\\\emdash\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"–\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"\\\\ndash\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"\\\\endash\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"<200b> (zero-width space)\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"\\\\zwsp\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"•\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"\\\\bul\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"✓\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"\\\\check\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"§\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"\\\\\\\\sect\"\n            }), \" (Two slashes to avoid collision with LaTeX)\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"→\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"\\\\rarrow\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"←\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"\\\\larrow\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"↑\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"\\\\uarrow\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"↓\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"\\\\darrow\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"⟷\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"\\\\lrarrow\"\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}