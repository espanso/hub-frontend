{"pageProps":{"packageRepo":{"package":{"id":"base64-encoder-decoder-0.1.0","name":"base64-encoder-decoder","author":"Werner Gottschalt","description":"Espanso package for encode and decode clipboard content","title":"Base64 Encoder and Decoder","version":"0.1.0","tags":["base64","encode","decode","clipboard","base64encode","base64decode"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/base64-encoder-decoder-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/base64-encoder-decoder-0.1.0-sha256.txt"},"manifest":{"name":"base64-encoder-decoder","title":"Base64 Encoder and Decoder","description":"Espanso package for encode and decode clipboard content","version":"0.1.0","author":"Werner Gottschalt","homepage":{"_tag":"Some","value":"https://github.com/WernerLuiz92/espanso-packages/packages/base64-encoder-decoder/0.1.0"},"tags":["base64","encode","decode","clipboard","base64encode","base64decode"]},"readme":"## Base64 Encoder and Decoder\n\nAn Base64 Encoder and Decoder package for [espanso](https://espanso.org/) which provides triggers for encoding the clipboard to base64 and decoding base64 the clipboard contents.\n\n### Usage\n\nTo use this package, just copy the text you want to encode or decode to the clipboard and type the following triggers:\n\n- `:b64e` - Encode the clipboard contents to base64\n- `:b64d` - Decode the clipboard contents from base64\n\n### Examples\n\n- `Text to be encoded` -> `:b64e` -> `VGV4dCB0byBiZSBlbmNvZGVk`\n- `VGV4dCB0byBiZSBlbmNvZGVk` -> `:b64d` -> `Text to be encoded`\n\nIt's simple as that!\n\n### Future Improvements\n\n- [ ] Add support for encoding with form feed.\n","packageYml":[{"name":"package.yml","content":"matches:\n  # Base64 encode the clipboard\n  - trigger: \":b64e\"\n    replace: \"{{output}}\"\n    vars:\n      - name: clipboard\n        type: clipboard\n      - name: output\n        type: shell\n        params:\n          cmd: \"echo -n \\\"{{clipboard}}\\\" | base64\"\n  \n  # Base64 decode the clipboard\n  - trigger: \":b64d\"\n    replace: \"{{output}}\"\n    vars:\n      - name: clipboard\n        type: clipboard\n      - name: output\n        type: shell\n        params:\n          cmd: \"echo -n \\\"{{clipboard}}\\\" | base64 -d\""}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    input: \"input\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Base64 Encoder and Decoder\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An Base64 Encoder and Decoder package for \", _jsx(_components.a, {\n        href: \"https://espanso.org/\",\n        children: \"espanso\"\n      }), \" which provides triggers for encoding the clipboard to base64 and decoding base64 the clipboard contents.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To use this package, just copy the text you want to encode or decode to the clipboard and type the following triggers:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \":b64e\"\n        }), \" - Encode the clipboard contents to base64\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \":b64d\"\n        }), \" - Decode the clipboard contents from base64\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Examples\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Text to be encoded\"\n        }), \" -> \", _jsx(_components.code, {\n          children: \":b64e\"\n        }), \" -> \", _jsx(_components.code, {\n          children: \"VGV4dCB0byBiZSBlbmNvZGVk\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"VGV4dCB0byBiZSBlbmNvZGVk\"\n        }), \" -> \", _jsx(_components.code, {\n          children: \":b64d\"\n        }), \" -> \", _jsx(_components.code, {\n          children: \"Text to be encoded\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It's simple as that!\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Future Improvements\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Add support for encoding with form feed.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}