{"pageProps":{"packageRepo":{"_tag":"Some","value":{"package":{"id":"better-typography-0.1.2","name":"better-typography","author":"Justin Wayne Liles","description":"A package to help convert quotes into smart quotes.","title":"Better Typography","version":"0.1.2","tags":["typography","quotes","convert","replacement"],"archive_url":"https://github.com/espanso/hub/releases/latest/download/better-typography-0.1.2.zip","archive_sha256_url":"https://github.com/espanso/hub/releases/latest/download/better-typography-0.1.2-sha256.txt"},"manifest":{"name":"better-typography","title":"Better Typography","description":"A package to help convert quotes into smart quotes.","version":"0.1.2","author":"Justin Wayne Liles","tags":["typography","quotes","convert","replacement"],"homepage":{"_tag":"Some","value":"https://github.com/jwliles/better-typography"}},"readme":"# Better Typography\n\nThis is an Espanso package to help with converting quotes into smart quotes. I created the file when I realized I had extensions or plugins in multiple apps meant to assist with these conversions. This particular config file is inspired by the [Smart Typography](https://github.com/mgmeyers/obsidian-smart-typography) plugin for Obsidian by mgmeyers.\n\n## Replacements\n\n*NOTE:* The pipe is the cursor position.\n\n| Trigger | Replacement | Character                |\n|---------|-------------|--------------------------|\n| ,\"      | “$\\|$”      | smart quotes             |\n| ,'      | ‘$\\|$’      | single smart quote       |\n| ''      | ’           | unicode apostrophe       |\n| ,n      | –           | en dash                  |\n| ,m      | —           | em dash                  |\n| ...     | …           | ellipsis                 |\n| <<      | «           | open guillemet           |\n| >>      | »           | close guillemet          |\n| <-      | ←           | left arrow               |\n| ->      | →           | right arrow              |\n| <=      | ≤           | less than or equal to    |\n| >=      | ≥           | greater than or equal to |\n| /=      | ≠           | not equal                |\n","packageYml":[{"name":"package.yml","content":"matches:\n\n  - trigger: ',\"'\n    replace: '“$|$”'\n\n  - trigger: \",'\"\n    replace: '‘$|$’'\n\n  - trigger: \"''\"\n    replace: '’'\n\n  - trigger: ',n'\n    replace: '–'\n\n  - trigger: ',m'\n    replace: '—'\n\n  - trigger: '...'\n    replace: '…'\n\n  - trigger: '<<'\n    replace: '«'\n\n  - trigger: '>>'\n    replace: '»'\n\n  - trigger: '<-'\n    replace: '←'\n\n  - trigger: '->'\n    replace: '→'\n\n  - trigger: '<='\n    replace: '≤'\n\n  - trigger: '>='\n    replace: '≥'\n\n  - trigger: '/='\n    replace: '≠'\n"}],"license":{"_tag":"None"},"serializedReadme":{"compiledSource":"var o=Object.defineProperty,N=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var d=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var i=(a,e,n)=>e in a?o(a,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[e]=n,t=(a,e)=>{for(var n in e||(e={}))d.call(e,n)&&i(a,n,e[n]);if(l)for(var n of l(e))p.call(e,n)&&i(a,n,e[n]);return a},m=(a,e)=>N(a,g(e));var u=(a,e)=>{var n={};for(var r in a)d.call(a,r)&&e.indexOf(r)<0&&(n[r]=a[r]);if(a!=null&&l)for(var r of l(a))e.indexOf(r)<0&&p.call(a,r)&&(n[r]=a[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:a}=r,e=u(r,[\"components\"]);return mdx(MDXLayout,m(t(t({},layoutProps),e),{components:a,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Better Typography\"),mdx(\"p\",null,\"This is an Espanso package to help with converting quotes into smart quotes. I created the file when I realized I had extensions or plugins in multiple apps meant to assist with these conversions. This particular config file is inspired by the \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://github.com/mgmeyers/obsidian-smart-typography\"}),\"Smart Typography\"),\" plugin for Obsidian by mgmeyers.\"),mdx(\"h2\",null,\"Replacements\"),mdx(\"p\",null,mdx(\"em\",{parentName:\"p\"},\"NOTE:\"),\" The pipe is the cursor position.\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",t({parentName:\"tr\"},{align:null}),\"Trigger\"),mdx(\"th\",t({parentName:\"tr\"},{align:null}),\"Replacement\"),mdx(\"th\",t({parentName:\"tr\"},{align:null}),\"Character\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),',\"'),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u201C$\",\"|\",\"$\\u201D\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"smart quotes\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\",'\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2018$\",\"|\",\"$\\u2019\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"single smart quote\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"''\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2019\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"unicode apostrophe\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\",n\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2013\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"en dash\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\",m\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2014\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"em dash\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"...\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2026\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"ellipsis\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"<<\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\xAB\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"open guillemet\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\">>\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\xBB\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"close guillemet\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"<-\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2190\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"left arrow\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"->\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2192\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"right arrow\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"<=\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2264\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"less than or equal to\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\">=\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2265\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"greater than or equal to\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"/=\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"\\u2260\"),mdx(\"td\",t({parentName:\"tr\"},{align:null}),\"not equal\")))))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"versions":["0.1.2"]},"__N_SSG":true}